
ATxMega64A4U_DASH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00802000  00001f0a  00001f9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000bc  00802008  00802008  00001fa6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001fa6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000004f8  00000000  00000000  00001fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000d3f1  00000000  00000000  000024d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002097  00000000  00000000  0000f8c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000070e7  00000000  00000000  00011958  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000132c  00000000  00000000  00018a40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00028b46  00000000  00000000  00019d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000055f1  00000000  00000000  000428b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004a0  00000000  00000000  00047ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000a3df  00000000  00000000  00048348  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	21 c1       	rjmp	.+578    	; 0x248 <__bad_interrupt>
       6:	00 00       	nop
       8:	1f c1       	rjmp	.+574    	; 0x248 <__bad_interrupt>
       a:	00 00       	nop
       c:	1d c1       	rjmp	.+570    	; 0x248 <__bad_interrupt>
       e:	00 00       	nop
      10:	1b c1       	rjmp	.+566    	; 0x248 <__bad_interrupt>
      12:	00 00       	nop
      14:	19 c1       	rjmp	.+562    	; 0x248 <__bad_interrupt>
      16:	00 00       	nop
      18:	17 c1       	rjmp	.+558    	; 0x248 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	15 c1       	rjmp	.+554    	; 0x248 <__bad_interrupt>
      1e:	00 00       	nop
      20:	13 c1       	rjmp	.+550    	; 0x248 <__bad_interrupt>
      22:	00 00       	nop
      24:	11 c1       	rjmp	.+546    	; 0x248 <__bad_interrupt>
      26:	00 00       	nop
      28:	0f c1       	rjmp	.+542    	; 0x248 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0d c1       	rjmp	.+538    	; 0x248 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0b c1       	rjmp	.+534    	; 0x248 <__bad_interrupt>
      32:	00 00       	nop
      34:	09 c1       	rjmp	.+530    	; 0x248 <__bad_interrupt>
      36:	00 00       	nop
      38:	65 c3       	rjmp	.+1738   	; 0x704 <__vector_14>
      3a:	00 00       	nop
      3c:	90 c3       	rjmp	.+1824   	; 0x75e <__vector_15>
      3e:	00 00       	nop
      40:	bb c3       	rjmp	.+1910   	; 0x7b8 <__vector_16>
      42:	00 00       	nop
      44:	e6 c3       	rjmp	.+1996   	; 0x812 <__vector_17>
      46:	00 00       	nop
      48:	11 c4       	rjmp	.+2082   	; 0x86c <__vector_18>
      4a:	00 00       	nop
      4c:	3c c4       	rjmp	.+2168   	; 0x8c6 <__vector_19>
      4e:	00 00       	nop
      50:	67 c4       	rjmp	.+2254   	; 0x920 <__vector_20>
      52:	00 00       	nop
      54:	92 c4       	rjmp	.+2340   	; 0x97a <__vector_21>
      56:	00 00       	nop
      58:	bd c4       	rjmp	.+2426   	; 0x9d4 <__vector_22>
      5a:	00 00       	nop
      5c:	e8 c4       	rjmp	.+2512   	; 0xa2e <__vector_23>
      5e:	00 00       	nop
      60:	f3 c0       	rjmp	.+486    	; 0x248 <__bad_interrupt>
      62:	00 00       	nop
      64:	f1 c0       	rjmp	.+482    	; 0x248 <__bad_interrupt>
      66:	00 00       	nop
      68:	ef c0       	rjmp	.+478    	; 0x248 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ed c0       	rjmp	.+474    	; 0x248 <__bad_interrupt>
      6e:	00 00       	nop
      70:	eb c0       	rjmp	.+470    	; 0x248 <__bad_interrupt>
      72:	00 00       	nop
      74:	e9 c0       	rjmp	.+466    	; 0x248 <__bad_interrupt>
      76:	00 00       	nop
      78:	e7 c0       	rjmp	.+462    	; 0x248 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e5 c0       	rjmp	.+458    	; 0x248 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e3 c0       	rjmp	.+454    	; 0x248 <__bad_interrupt>
      82:	00 00       	nop
      84:	e1 c0       	rjmp	.+450    	; 0x248 <__bad_interrupt>
      86:	00 00       	nop
      88:	df c0       	rjmp	.+446    	; 0x248 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	dd c0       	rjmp	.+442    	; 0x248 <__bad_interrupt>
      8e:	00 00       	nop
      90:	db c0       	rjmp	.+438    	; 0x248 <__bad_interrupt>
      92:	00 00       	nop
      94:	d9 c0       	rjmp	.+434    	; 0x248 <__bad_interrupt>
      96:	00 00       	nop
      98:	d7 c0       	rjmp	.+430    	; 0x248 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d5 c0       	rjmp	.+426    	; 0x248 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d3 c0       	rjmp	.+422    	; 0x248 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d1 c0       	rjmp	.+418    	; 0x248 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cf c0       	rjmp	.+414    	; 0x248 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cd c0       	rjmp	.+410    	; 0x248 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cb c0       	rjmp	.+406    	; 0x248 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c9 c0       	rjmp	.+402    	; 0x248 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c7 c0       	rjmp	.+398    	; 0x248 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	7a c6       	rjmp	.+3316   	; 0xdb2 <__vector_47>
      be:	00 00       	nop
      c0:	a5 c6       	rjmp	.+3402   	; 0xe0c <__vector_48>
      c2:	00 00       	nop
      c4:	d0 c6       	rjmp	.+3488   	; 0xe66 <__vector_49>
      c6:	00 00       	nop
      c8:	fb c6       	rjmp	.+3574   	; 0xec0 <__vector_50>
      ca:	00 00       	nop
      cc:	26 c7       	rjmp	.+3660   	; 0xf1a <__vector_51>
      ce:	00 00       	nop
      d0:	51 c7       	rjmp	.+3746   	; 0xf74 <__vector_52>
      d2:	00 00       	nop
      d4:	b9 c0       	rjmp	.+370    	; 0x248 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b7 c0       	rjmp	.+366    	; 0x248 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b5 c0       	rjmp	.+362    	; 0x248 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b3 c0       	rjmp	.+358    	; 0x248 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b1 c0       	rjmp	.+354    	; 0x248 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	af c0       	rjmp	.+350    	; 0x248 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ad c0       	rjmp	.+346    	; 0x248 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ab c0       	rjmp	.+342    	; 0x248 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a9 c0       	rjmp	.+338    	; 0x248 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a7 c0       	rjmp	.+334    	; 0x248 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a5 c0       	rjmp	.+330    	; 0x248 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a3 c0       	rjmp	.+326    	; 0x248 <__bad_interrupt>
     102:	00 00       	nop
     104:	a1 c0       	rjmp	.+322    	; 0x248 <__bad_interrupt>
     106:	00 00       	nop
     108:	9f c0       	rjmp	.+318    	; 0x248 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9d c0       	rjmp	.+314    	; 0x248 <__bad_interrupt>
     10e:	00 00       	nop
     110:	9b c0       	rjmp	.+310    	; 0x248 <__bad_interrupt>
     112:	00 00       	nop
     114:	99 c0       	rjmp	.+306    	; 0x248 <__bad_interrupt>
     116:	00 00       	nop
     118:	97 c0       	rjmp	.+302    	; 0x248 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	95 c0       	rjmp	.+298    	; 0x248 <__bad_interrupt>
     11e:	00 00       	nop
     120:	93 c0       	rjmp	.+294    	; 0x248 <__bad_interrupt>
     122:	00 00       	nop
     124:	91 c0       	rjmp	.+290    	; 0x248 <__bad_interrupt>
     126:	00 00       	nop
     128:	8f c0       	rjmp	.+286    	; 0x248 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8d c0       	rjmp	.+282    	; 0x248 <__bad_interrupt>
     12e:	00 00       	nop
     130:	8b c0       	rjmp	.+278    	; 0x248 <__bad_interrupt>
     132:	00 00       	nop
     134:	a9 c4       	rjmp	.+2386   	; 0xa88 <__vector_77>
     136:	00 00       	nop
     138:	d4 c4       	rjmp	.+2472   	; 0xae2 <__vector_78>
     13a:	00 00       	nop
     13c:	ff c4       	rjmp	.+2558   	; 0xb3c <__vector_79>
     13e:	00 00       	nop
     140:	2a c5       	rjmp	.+2644   	; 0xb96 <__vector_80>
     142:	00 00       	nop
     144:	55 c5       	rjmp	.+2730   	; 0xbf0 <__vector_81>
     146:	00 00       	nop
     148:	80 c5       	rjmp	.+2816   	; 0xc4a <__vector_82>
     14a:	00 00       	nop
     14c:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__vector_83>
     150:	a9 c5       	rjmp	.+2898   	; 0xca4 <__vector_84>
     152:	00 00       	nop
     154:	d4 c5       	rjmp	.+2984   	; 0xcfe <__vector_85>
     156:	00 00       	nop
     158:	ff c5       	rjmp	.+3070   	; 0xd58 <__vector_86>
     15a:	00 00       	nop
     15c:	75 c0       	rjmp	.+234    	; 0x248 <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <__vector_88>
     164:	71 c0       	rjmp	.+226    	; 0x248 <__bad_interrupt>
     166:	00 00       	nop
     168:	6f c0       	rjmp	.+222    	; 0x248 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6d c0       	rjmp	.+218    	; 0x248 <__bad_interrupt>
     16e:	00 00       	nop
     170:	6b c0       	rjmp	.+214    	; 0x248 <__bad_interrupt>
     172:	00 00       	nop
     174:	69 c0       	rjmp	.+210    	; 0x248 <__bad_interrupt>
     176:	00 00       	nop
     178:	67 c0       	rjmp	.+206    	; 0x248 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	65 c0       	rjmp	.+202    	; 0x248 <__bad_interrupt>
     17e:	00 00       	nop
     180:	63 c0       	rjmp	.+198    	; 0x248 <__bad_interrupt>
     182:	00 00       	nop
     184:	61 c0       	rjmp	.+194    	; 0x248 <__bad_interrupt>
     186:	00 00       	nop
     188:	5f c0       	rjmp	.+190    	; 0x248 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5d c0       	rjmp	.+186    	; 0x248 <__bad_interrupt>
     18e:	00 00       	nop
     190:	5b c0       	rjmp	.+182    	; 0x248 <__bad_interrupt>
     192:	00 00       	nop
     194:	59 c0       	rjmp	.+178    	; 0x248 <__bad_interrupt>
     196:	00 00       	nop
     198:	57 c0       	rjmp	.+174    	; 0x248 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	55 c0       	rjmp	.+170    	; 0x248 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	53 c0       	rjmp	.+166    	; 0x248 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	51 c0       	rjmp	.+162    	; 0x248 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4f c0       	rjmp	.+158    	; 0x248 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4d c0       	rjmp	.+154    	; 0x248 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4b c0       	rjmp	.+150    	; 0x248 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	49 c0       	rjmp	.+146    	; 0x248 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	47 c0       	rjmp	.+142    	; 0x248 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	45 c0       	rjmp	.+138    	; 0x248 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	43 c0       	rjmp	.+134    	; 0x248 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	41 c0       	rjmp	.+130    	; 0x248 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3f c0       	rjmp	.+126    	; 0x248 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3d c0       	rjmp	.+122    	; 0x248 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3b c0       	rjmp	.+118    	; 0x248 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	39 c0       	rjmp	.+114    	; 0x248 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	37 c0       	rjmp	.+110    	; 0x248 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	35 c0       	rjmp	.+106    	; 0x248 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	33 c0       	rjmp	.+102    	; 0x248 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	31 c0       	rjmp	.+98     	; 0x248 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2f c0       	rjmp	.+94     	; 0x248 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2d c0       	rjmp	.+90     	; 0x248 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2b c0       	rjmp	.+86     	; 0x248 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	29 c0       	rjmp	.+82     	; 0x248 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	27 c0       	rjmp	.+78     	; 0x248 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	08 03       	fmul	r16, r16
     1fe:	26 03       	mulsu	r18, r22
     200:	21 03       	mulsu	r18, r17
     202:	1c 03       	fmul	r17, r20
     204:	17 03       	mulsu	r17, r23
     206:	12 03       	mulsu	r17, r18
     208:	0d 03       	fmul	r16, r21

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e2       	ldi	r29, 0x2F	; 47
     214:	de bf       	out	0x3e, r29	; 62

00000216 <__do_copy_data>:
     216:	10 e2       	ldi	r17, 0x20	; 32
     218:	a0 e0       	ldi	r26, 0x00	; 0
     21a:	b0 e2       	ldi	r27, 0x20	; 32
     21c:	ea e0       	ldi	r30, 0x0A	; 10
     21e:	ff e1       	ldi	r31, 0x1F	; 31
     220:	00 e0       	ldi	r16, 0x00	; 0
     222:	0b bf       	out	0x3b, r16	; 59
     224:	02 c0       	rjmp	.+4      	; 0x22a <__do_copy_data+0x14>
     226:	07 90       	elpm	r0, Z+
     228:	0d 92       	st	X+, r0
     22a:	a8 30       	cpi	r26, 0x08	; 8
     22c:	b1 07       	cpc	r27, r17
     22e:	d9 f7       	brne	.-10     	; 0x226 <__do_copy_data+0x10>

00000230 <__do_clear_bss>:
     230:	20 e2       	ldi	r18, 0x20	; 32
     232:	a8 e0       	ldi	r26, 0x08	; 8
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a4 3c       	cpi	r26, 0xC4	; 196
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <main>
     244:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <_exit>

00000248 <__bad_interrupt>:
     248:	db ce       	rjmp	.-586    	; 0x0 <__vectors>

0000024a <qdec_evsys_pin_2_chmux>:
	config->freq_opt.event_channel = event_channel;
}

void qdec_config_freq_tc(qdec_config_t *config, volatile void *timer)
{
	config->freq_opt.timer = timer;
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	fa 01       	movw	r30, r20
     24e:	e0 58       	subi	r30, 0x80	; 128
     250:	fe 4f       	sbci	r31, 0xFE	; 254
     252:	81 15       	cp	r24, r1
     254:	26 e0       	ldi	r18, 0x06	; 6
     256:	92 07       	cpc	r25, r18
     258:	21 f4       	brne	.+8      	; 0x262 <qdec_evsys_pin_2_chmux+0x18>
     25a:	26 2f       	mov	r18, r22
     25c:	20 65       	ori	r18, 0x50	; 80
     25e:	20 83       	st	Z, r18
     260:	0e c0       	rjmp	.+28     	; 0x27e <qdec_evsys_pin_2_chmux+0x34>
     262:	80 32       	cpi	r24, 0x20	; 32
     264:	26 e0       	ldi	r18, 0x06	; 6
     266:	92 07       	cpc	r25, r18
     268:	19 f4       	brne	.+6      	; 0x270 <qdec_evsys_pin_2_chmux+0x26>
     26a:	68 65       	ori	r22, 0x58	; 88
     26c:	60 83       	st	Z, r22
     26e:	08 95       	ret
     270:	80 34       	cpi	r24, 0x40	; 64
     272:	26 e0       	ldi	r18, 0x06	; 6
     274:	92 07       	cpc	r25, r18
     276:	19 f4       	brne	.+6      	; 0x27e <qdec_evsys_pin_2_chmux+0x34>
     278:	60 66       	ori	r22, 0x60	; 96
     27a:	60 83       	st	Z, r22
     27c:	08 95       	ret
     27e:	80 36       	cpi	r24, 0x60	; 96
     280:	96 40       	sbci	r25, 0x06	; 6
     282:	11 f4       	brne	.+4      	; 0x288 <qdec_evsys_pin_2_chmux+0x3e>
     284:	68 66       	ori	r22, 0x68	; 104
     286:	60 83       	st	Z, r22
     288:	08 95       	ret

0000028a <qdec_get_config_defaults>:
     28a:	fc 01       	movw	r30, r24
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	96 e0       	ldi	r25, 0x06	; 6
     290:	80 83       	st	Z, r24
     292:	91 83       	std	Z+1, r25	; 0x01
     294:	12 82       	std	Z+2, r1	; 0x02
     296:	82 e0       	ldi	r24, 0x02	; 2
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	83 83       	std	Z+3, r24	; 0x03
     29c:	94 83       	std	Z+4, r25	; 0x04
     29e:	15 82       	std	Z+5, r1	; 0x05
     2a0:	16 82       	std	Z+6, r1	; 0x06
     2a2:	11 86       	std	Z+9, r1	; 0x09
     2a4:	12 86       	std	Z+10, r1	; 0x0a
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	98 e0       	ldi	r25, 0x08	; 8
     2aa:	83 87       	std	Z+11, r24	; 0x0b
     2ac:	94 87       	std	Z+12, r25	; 0x0c
     2ae:	80 e4       	ldi	r24, 0x40	; 64
     2b0:	98 e0       	ldi	r25, 0x08	; 8
     2b2:	81 8b       	std	Z+17, r24	; 0x11
     2b4:	92 8b       	std	Z+18, r25	; 0x12
     2b6:	17 86       	std	Z+15, r1	; 0x0f
     2b8:	82 e0       	ldi	r24, 0x02	; 2
     2ba:	80 8b       	std	Z+16, r24	; 0x10
     2bc:	48 ee       	ldi	r20, 0xE8	; 232
     2be:	53 e0       	ldi	r21, 0x03	; 3
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	70 e0       	ldi	r23, 0x00	; 0
     2c4:	43 8b       	std	Z+19, r20	; 0x13
     2c6:	54 8b       	std	Z+20, r21	; 0x14
     2c8:	65 8b       	std	Z+21, r22	; 0x15
     2ca:	76 8b       	std	Z+22, r23	; 0x16
     2cc:	84 e0       	ldi	r24, 0x04	; 4
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	85 87       	std	Z+13, r24	; 0x0d
     2d2:	96 87       	std	Z+14, r25	; 0x0e
     2d4:	08 95       	ret

000002d6 <qdec_config_phase_pins>:
     2d6:	0f 93       	push	r16
     2d8:	1f 93       	push	r17
     2da:	fc 01       	movw	r30, r24
     2dc:	60 83       	st	Z, r22
     2de:	71 83       	std	Z+1, r23	; 0x01
     2e0:	42 83       	std	Z+2, r20	; 0x02
     2e2:	03 83       	std	Z+3, r16	; 0x03
     2e4:	14 83       	std	Z+4, r17	; 0x04
     2e6:	25 83       	std	Z+5, r18	; 0x05
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	08 95       	ret

000002ee <qdec_config_event_channel>:
     2ee:	fc 01       	movw	r30, r24
     2f0:	62 87       	std	Z+10, r22	; 0x0a
     2f2:	08 95       	ret

000002f4 <qdec_config_tc>:
     2f4:	fc 01       	movw	r30, r24
     2f6:	63 87       	std	Z+11, r22	; 0x0b
     2f8:	74 87       	std	Z+12, r23	; 0x0c
     2fa:	08 95       	ret

000002fc <qdec_config_revolution>:
     2fc:	fc 01       	movw	r30, r24
     2fe:	65 87       	std	Z+13, r22	; 0x0d
     300:	76 87       	std	Z+14, r23	; 0x0e
     302:	08 95       	ret

00000304 <qdec_enabled>:
}

void qdec_enabled(qdec_config_t *config)
{
     304:	2f 92       	push	r2
     306:	3f 92       	push	r3
     308:	4f 92       	push	r4
     30a:	5f 92       	push	r5
     30c:	6f 92       	push	r6
     30e:	7f 92       	push	r7
     310:	8f 92       	push	r8
     312:	9f 92       	push	r9
     314:	af 92       	push	r10
     316:	bf 92       	push	r11
     318:	cf 92       	push	r12
     31a:	df 92       	push	r13
     31c:	ef 92       	push	r14
     31e:	ff 92       	push	r15
     320:	0f 93       	push	r16
     322:	1f 93       	push	r17
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	ec 01       	movw	r28, r24
static void qdec_enabled_tc_freq(qdec_config_t *config);

static void qdec_enabled_pins(qdec_config_t *config)
{
	/* Configure pins QDPH0 and QDPH90  as inputs */
	config->port->DIRCLR = QDEC_PIN_PHASES_MASK << config->pins_base;
     32a:	e8 81       	ld	r30, Y
     32c:	f9 81       	ldd	r31, Y+1	; 0x01
     32e:	83 e0       	ldi	r24, 0x03	; 3
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	9c 01       	movw	r18, r24
     334:	0a 80       	ldd	r0, Y+2	; 0x02
     336:	02 c0       	rjmp	.+4      	; 0x33c <qdec_enabled+0x38>
     338:	22 0f       	add	r18, r18
     33a:	33 1f       	adc	r19, r19
     33c:	0a 94       	dec	r0
     33e:	e2 f7       	brpl	.-8      	; 0x338 <qdec_enabled+0x34>
     340:	22 83       	std	Z+2, r18	; 0x02

	/* Select MPCMASK for to configure QDPH0 and QDPH90 signals */
	PORTCFG.MPCMASK = QDEC_PIN_PHASES_MASK << config->pins_base;
     342:	0a 80       	ldd	r0, Y+2	; 0x02
     344:	02 c0       	rjmp	.+4      	; 0x34a <qdec_enabled+0x46>
     346:	88 0f       	add	r24, r24
     348:	99 1f       	adc	r25, r25
     34a:	0a 94       	dec	r0
     34c:	e2 f7       	brpl	.-8      	; 0x346 <qdec_enabled+0x42>
     34e:	80 93 b0 00 	sts	0x00B0, r24

	/* Configure for signal sensing and inversion if needed, for
	 * QDPH0 and QDPH90
	 */
	config->port->PIN0CTRL = (config->port->PIN0CTRL & ~PORT_ISC_gm)
     352:	e8 81       	ld	r30, Y
     354:	f9 81       	ldd	r31, Y+1	; 0x01
     356:	80 89       	ldd	r24, Z+16	; 0x10
     358:	88 7f       	andi	r24, 0xF8	; 248
     35a:	9d 81       	ldd	r25, Y+5	; 0x05
     35c:	99 23       	and	r25, r25
     35e:	11 f0       	breq	.+4      	; 0x364 <qdec_enabled+0x60>
     360:	90 e4       	ldi	r25, 0x40	; 64
     362:	01 c0       	rjmp	.+2      	; 0x366 <qdec_enabled+0x62>
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	89 2b       	or	r24, r25
     368:	80 8b       	std	Z+16, r24	; 0x10
			| PORT_ISC_BOTHEDGES_gc
			| (config->phases.pins_invert ? PORT_INVEN_bm : 0);

	/* Check if Index signal is used and configure accordingly */
	if (config->index.enabled) {
     36a:	8e 81       	ldd	r24, Y+6	; 0x06
     36c:	88 23       	and	r24, r24
     36e:	01 f1       	breq	.+64     	; 0x3b0 <qdec_enabled+0xac>
		 * are needed as decoder inputs including index pin
		 */
		Assert(config->pins_base < 6);

		/* Configure pins QDINDX as inputs */
		config->port->DIRCLR = QDEC_PIN_INDEX_MASK << config->pins_base;
     370:	e8 81       	ld	r30, Y
     372:	f9 81       	ldd	r31, Y+1	; 0x01
     374:	84 e0       	ldi	r24, 0x04	; 4
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	9c 01       	movw	r18, r24
     37a:	0a 80       	ldd	r0, Y+2	; 0x02
     37c:	02 c0       	rjmp	.+4      	; 0x382 <qdec_enabled+0x7e>
     37e:	22 0f       	add	r18, r18
     380:	33 1f       	adc	r19, r19
     382:	0a 94       	dec	r0
     384:	e2 f7       	brpl	.-8      	; 0x37e <qdec_enabled+0x7a>
     386:	22 83       	std	Z+2, r18	; 0x02

		/* Select MPCMASK for to configure Index signal */
		PORTCFG.MPCMASK = QDEC_PIN_INDEX_MASK << config->pins_base;
     388:	0a 80       	ldd	r0, Y+2	; 0x02
     38a:	02 c0       	rjmp	.+4      	; 0x390 <qdec_enabled+0x8c>
     38c:	88 0f       	add	r24, r24
     38e:	99 1f       	adc	r25, r25
     390:	0a 94       	dec	r0
     392:	e2 f7       	brpl	.-8      	; 0x38c <qdec_enabled+0x88>
     394:	80 93 b0 00 	sts	0x00B0, r24

		/* Configure for Index signal sensing and inversion if needed */
		config->port->PIN0CTRL = (config->port->PIN0CTRL & ~PORT_ISC_gm)
     398:	e8 81       	ld	r30, Y
     39a:	f9 81       	ldd	r31, Y+1	; 0x01
     39c:	80 89       	ldd	r24, Z+16	; 0x10
     39e:	88 7f       	andi	r24, 0xF8	; 248
     3a0:	9f 81       	ldd	r25, Y+7	; 0x07
     3a2:	99 23       	and	r25, r25
     3a4:	11 f0       	breq	.+4      	; 0x3aa <qdec_enabled+0xa6>
     3a6:	90 e4       	ldi	r25, 0x40	; 64
     3a8:	01 c0       	rjmp	.+2      	; 0x3ac <qdec_enabled+0xa8>
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	89 2b       	or	r24, r25
     3ae:	80 8b       	std	Z+16, r24	; 0x10
{
	volatile uint8_t *evsys_chctrl;
	uint32_t nb_filter_cycle;

	/* Configure event channel for quadrature decoding of pins */
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     3b0:	62 e0       	ldi	r22, 0x02	; 2
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <sysclk_enable_module>

	/* Initialize CHMUX register */
	qdec_evsys_pin_2_chmux(config->port, config->pins_base,
     3b8:	4a 85       	ldd	r20, Y+10	; 0x0a
     3ba:	6a 81       	ldd	r22, Y+2	; 0x02
     3bc:	88 81       	ld	r24, Y
     3be:	99 81       	ldd	r25, Y+1	; 0x01
     3c0:	44 df       	rcall	.-376    	; 0x24a <qdec_evsys_pin_2_chmux>

	/* In event channel enable Quadrature Decode with digital
	 * filter and Rotary filter
	 * (Rotary filter is only for XMEGA-E devices)
	 */
	evsys_chctrl = &EVSYS.CH0CTRL + config->event_channel;
     3c2:	8a 84       	ldd	r8, Y+10	; 0x0a
     3c4:	91 2c       	mov	r9, r1
     3c6:	38 e7       	ldi	r19, 0x78	; 120
     3c8:	83 1a       	sub	r8, r19
     3ca:	3e ef       	ldi	r19, 0xFE	; 254
     3cc:	93 0a       	sbc	r9, r19
	if (config->pins_filter_us > 1000) {
     3ce:	4b 80       	ldd	r4, Y+3	; 0x03
     3d0:	5c 80       	ldd	r5, Y+4	; 0x04
     3d2:	89 ee       	ldi	r24, 0xE9	; 233
     3d4:	48 16       	cp	r4, r24
     3d6:	83 e0       	ldi	r24, 0x03	; 3
     3d8:	58 06       	cpc	r5, r24
     3da:	b8 f0       	brcs	.+46     	; 0x40a <qdec_enabled+0x106>
		nb_filter_cycle = (config->pins_filter_us / 1000)
     3dc:	92 01       	movw	r18, r4
     3de:	36 95       	lsr	r19
     3e0:	27 95       	ror	r18
     3e2:	36 95       	lsr	r19
     3e4:	27 95       	ror	r18
     3e6:	36 95       	lsr	r19
     3e8:	27 95       	ror	r18
     3ea:	a5 ec       	ldi	r26, 0xC5	; 197
     3ec:	b0 e2       	ldi	r27, 0x20	; 32
     3ee:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__umulhisi3>
     3f2:	9c 01       	movw	r18, r24
     3f4:	32 95       	swap	r19
     3f6:	22 95       	swap	r18
     3f8:	2f 70       	andi	r18, 0x0F	; 15
     3fa:	23 27       	eor	r18, r19
     3fc:	3f 70       	andi	r19, 0x0F	; 15
     3fe:	23 27       	eor	r18, r19
     400:	a0 e0       	ldi	r26, 0x00	; 0
     402:	bd e7       	ldi	r27, 0x7D	; 125
     404:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__umulhisi3>
     408:	18 c0       	rjmp	.+48     	; 0x43a <qdec_enabled+0x136>
				* (sysclk_get_per_hz() / 1000);
	} else {
		nb_filter_cycle = config->pins_filter_us
				* (sysclk_get_per_hz() / 1000000);
     40a:	61 2c       	mov	r6, r1
     40c:	71 2c       	mov	r7, r1
	evsys_chctrl = &EVSYS.CH0CTRL + config->event_channel;
	if (config->pins_filter_us > 1000) {
		nb_filter_cycle = (config->pins_filter_us / 1000)
				* (sysclk_get_per_hz() / 1000);
	} else {
		nb_filter_cycle = config->pins_filter_us
     40e:	44 0c       	add	r4, r4
     410:	55 1c       	adc	r5, r5
     412:	66 1c       	adc	r6, r6
     414:	77 1c       	adc	r7, r7
     416:	44 0c       	add	r4, r4
     418:	55 1c       	adc	r5, r5
     41a:	66 1c       	adc	r6, r6
     41c:	77 1c       	adc	r7, r7
     41e:	44 0c       	add	r4, r4
     420:	55 1c       	adc	r5, r5
     422:	66 1c       	adc	r6, r6
     424:	77 1c       	adc	r7, r7
     426:	44 0c       	add	r4, r4
     428:	55 1c       	adc	r5, r5
     42a:	66 1c       	adc	r6, r6
     42c:	77 1c       	adc	r7, r7
     42e:	c3 01       	movw	r24, r6
     430:	b2 01       	movw	r22, r4
     432:	66 0f       	add	r22, r22
     434:	77 1f       	adc	r23, r23
     436:	88 1f       	adc	r24, r24
     438:	99 1f       	adc	r25, r25
     43a:	2b 01       	movw	r4, r22
     43c:	3c 01       	movw	r6, r24
     43e:	68 30       	cpi	r22, 0x08	; 8
     440:	71 05       	cpc	r23, r1
     442:	81 05       	cpc	r24, r1
     444:	91 05       	cpc	r25, r1
     446:	38 f0       	brcs	.+14     	; 0x456 <qdec_enabled+0x152>
     448:	0f 2e       	mov	r0, r31
     44a:	f7 e0       	ldi	r31, 0x07	; 7
     44c:	4f 2e       	mov	r4, r31
     44e:	51 2c       	mov	r5, r1
     450:	61 2c       	mov	r6, r1
     452:	71 2c       	mov	r7, r1
     454:	f0 2d       	mov	r31, r0
			| (config->rotary ? EVSYS_ROTARY_bm : 0);
#else
	if (nb_filter_cycle > 7) {
		nb_filter_cycle = 7;
	}
	*evsys_chctrl = EVSYS_QDEN_bm | nb_filter_cycle;
     456:	84 2d       	mov	r24, r4
     458:	88 60       	ori	r24, 0x08	; 8
     45a:	f4 01       	movw	r30, r8
     45c:	80 83       	st	Z, r24
#endif

	if (config->index.enabled) {
     45e:	8e 81       	ldd	r24, Y+6	; 0x06
     460:	88 23       	and	r24, r24
     462:	99 f0       	breq	.+38     	; 0x48a <qdec_enabled+0x186>
		 * And port pin-n+2 should be used for index
		 * signal input
		 */

		/* Enable quadrature decode index for event channel-0 */
		*evsys_chctrl |= ((uint8_t)config->index.rec_state
     464:	20 81       	ld	r18, Z
				<< EVSYS_QDIRM_gp)
     466:	88 85       	ldd	r24, Y+8	; 0x08
     468:	f0 e2       	ldi	r31, 0x20	; 32
     46a:	8f 9f       	mul	r24, r31
     46c:	c0 01       	movw	r24, r0
     46e:	11 24       	eor	r1, r1
		 * And port pin-n+2 should be used for index
		 * signal input
		 */

		/* Enable quadrature decode index for event channel-0 */
		*evsys_chctrl |= ((uint8_t)config->index.rec_state
     470:	82 2b       	or	r24, r18
     472:	80 61       	ori	r24, 0x10	; 16
     474:	f4 01       	movw	r30, r8
     476:	80 83       	st	Z, r24
				<< EVSYS_QDIRM_gp)
				| EVSYS_QDIEN_bm;

		/* Initialize CHMUX register */
		qdec_evsys_pin_2_chmux(config->port, config->pins_base + 2,
     478:	4a 85       	ldd	r20, Y+10	; 0x0a
     47a:	4f 5f       	subi	r20, 0xFF	; 255
     47c:	6a 81       	ldd	r22, Y+2	; 0x02
     47e:	6e 5f       	subi	r22, 0xFE	; 254
     480:	88 81       	ld	r24, Y
     482:	99 81       	ldd	r25, Y+1	; 0x01
     484:	e2 de       	rcall	.-572    	; 0x24a <qdec_evsys_pin_2_chmux>
				config->event_channel + 1);

		/* Enable digital filter*/
		evsys_chctrl++;
		*evsys_chctrl = nb_filter_cycle;
     486:	f4 01       	movw	r30, r8
     488:	41 82       	std	Z+1, r4	; 0x01
	 * - Set event source and event action as per sent parameters
	 * - Load Period register of TC with number of counts for single
	 *   revolution
	 * - Write clock value and start timer
	 */
	tc_enable(config->timer);
     48a:	8b 85       	ldd	r24, Y+11	; 0x0b
     48c:	9c 85       	ldd	r25, Y+12	; 0x0c
     48e:	9f d5       	rcall	.+2878   	; 0xfce <tc_enable>
	tc_set_input_capture(config->timer,
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	98 5f       	subi	r25, 0xF8	; 248
     494:	eb 85       	ldd	r30, Y+11	; 0x0b
     496:	fc 85       	ldd	r31, Y+12	; 0x0c
 * \param eventaction Event action capture type
 */
static inline void tc_set_input_capture(volatile void *tc,
		TC_EVSEL_t eventsource, TC_EVACT_t eventaction)
{
	((TC0_t *)tc)->CTRLD &= ~(TC0_EVSEL_gm | TC0_EVACT_gm);
     498:	83 81       	ldd	r24, Z+3	; 0x03
     49a:	80 71       	andi	r24, 0x10	; 16
     49c:	83 83       	std	Z+3, r24	; 0x03
	((TC0_t *)tc)->CTRLD |= ((uint8_t)eventsource | (uint8_t)eventaction);
     49e:	83 81       	ldd	r24, Z+3	; 0x03
     4a0:	80 66       	ori	r24, 0x60	; 96
     4a2:	89 2b       	or	r24, r25
     4a4:	83 83       	std	Z+3, r24	; 0x03
			(TC_EVSEL_t)(TC_EVSEL_CH0_gc + config->event_channel),
			TC_EVACT_QDEC_gc);
	tc_write_count(config->timer, 0);
     4a6:	eb 85       	ldd	r30, Y+11	; 0x0b
     4a8:	fc 85       	ldd	r31, Y+12	; 0x0c
 * \param tc Pointer to TC module.
 * \param cnt_value Counter value :
 */
static inline void tc_write_count(volatile void *tc, uint16_t cnt_value)
{
	((TC0_t *)tc)->CNT = cnt_value;
     4aa:	10 a2       	std	Z+32, r1	; 0x20
     4ac:	11 a2       	std	Z+33, r1	; 0x21
	tc_write_period(config->timer, config->revolution - 1);
     4ae:	8d 85       	ldd	r24, Y+13	; 0x0d
     4b0:	9e 85       	ldd	r25, Y+14	; 0x0e
     4b2:	01 97       	sbiw	r24, 0x01	; 1
     4b4:	eb 85       	ldd	r30, Y+11	; 0x0b
     4b6:	fc 85       	ldd	r31, Y+12	; 0x0c
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
     4b8:	86 a3       	std	Z+38, r24	; 0x26
     4ba:	97 a3       	std	Z+39, r25	; 0x27
	tc_write_clock_source(config->timer, TC_CLKSEL_DIV1_gc);
     4bc:	eb 85       	ldd	r30, Y+11	; 0x0b
     4be:	fc 85       	ldd	r31, Y+12	; 0x0c
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
     4c0:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
     4c2:	80 7f       	andi	r24, 0xF0	; 240
     4c4:	81 60       	ori	r24, 0x01	; 1
     4c6:	80 83       	st	Z, r24
#endif

	qdec_enabled_pins(config);
	qdec_enabled_evsys(config);
	qdec_enabled_tc(config);
	if (config->freq_opt.enabled) {
     4c8:	8f 85       	ldd	r24, Y+15	; 0x0f
     4ca:	88 23       	and	r24, r24
     4cc:	09 f4       	brne	.+2      	; 0x4d0 <qdec_enabled+0x1cc>
     4ce:	07 c1       	rjmp	.+526    	; 0x6de <qdec_enabled+0x3da>
			EVSYS.DFCTRL |= EVSYS_PRESCFILT_CH37_gc;
		}
	}

#endif
	evsys_chctrl_freq = &EVSYS.CH0CTRL + config->freq_opt.event_channel;
     4d0:	e8 89       	ldd	r30, Y+16	; 0x10
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	e8 57       	subi	r30, 0x78	; 120
     4d6:	fe 4f       	sbci	r31, 0xFE	; 254
	evsys_chctrl = &EVSYS.CH0CTRL + config->event_channel;
     4d8:	aa 85       	ldd	r26, Y+10	; 0x0a
     4da:	b0 e0       	ldi	r27, 0x00	; 0
     4dc:	a8 57       	subi	r26, 0x78	; 120
     4de:	be 4f       	sbci	r27, 0xFE	; 254
	*evsys_chctrl_freq = *evsys_chctrl & EVSYS_DIGFILT_gm;
     4e0:	8c 91       	ld	r24, X
     4e2:	87 70       	andi	r24, 0x07	; 7
     4e4:	80 83       	st	Z, r24

	/* Configure event channel for frequency calculation */
	qdec_evsys_pin_2_chmux(config->port, config->pins_base,
     4e6:	48 89       	ldd	r20, Y+16	; 0x10
     4e8:	6a 81       	ldd	r22, Y+2	; 0x02
     4ea:	88 81       	ld	r24, Y
     4ec:	99 81       	ldd	r25, Y+1	; 0x01
     4ee:	ad de       	rcall	.-678    	; 0x24a <qdec_evsys_pin_2_chmux>
	/* Configure TC to capture frequency
	 * Load timer period register
	 * Enable capture on CCA channel
	 * Select timer clock source
	 */
	tc_enable(config->freq_opt.timer);
     4f0:	89 89       	ldd	r24, Y+17	; 0x11
     4f2:	9a 89       	ldd	r25, Y+18	; 0x12
     4f4:	6c d5       	rcall	.+2776   	; 0xfce <tc_enable>
	tc_set_input_capture(config->freq_opt.timer,
     4f6:	98 89       	ldd	r25, Y+16	; 0x10
     4f8:	98 5f       	subi	r25, 0xF8	; 248
     4fa:	e9 89       	ldd	r30, Y+17	; 0x11
     4fc:	fa 89       	ldd	r31, Y+18	; 0x12
 * \param eventaction Event action capture type
 */
static inline void tc_set_input_capture(volatile void *tc,
		TC_EVSEL_t eventsource, TC_EVACT_t eventaction)
{
	((TC0_t *)tc)->CTRLD &= ~(TC0_EVSEL_gm | TC0_EVACT_gm);
     4fe:	83 81       	ldd	r24, Z+3	; 0x03
     500:	80 71       	andi	r24, 0x10	; 16
     502:	83 83       	std	Z+3, r24	; 0x03
	((TC0_t *)tc)->CTRLD |= ((uint8_t)eventsource | (uint8_t)eventaction);
     504:	83 81       	ldd	r24, Z+3	; 0x03
     506:	80 6a       	ori	r24, 0xA0	; 160
     508:	89 2b       	or	r24, r25
     50a:	83 83       	std	Z+3, r24	; 0x03
			(TC_EVSEL_t)(TC_EVSEL_CH0_gc
			+ config->freq_opt.event_channel),
			TC_EVACT_FRQ_gc);
	tc_write_count(config->freq_opt.timer, 0);
     50c:	e9 89       	ldd	r30, Y+17	; 0x11
     50e:	fa 89       	ldd	r31, Y+18	; 0x12
 * \param tc Pointer to TC module.
 * \param cnt_value Counter value :
 */
static inline void tc_write_count(volatile void *tc, uint16_t cnt_value)
{
	((TC0_t *)tc)->CNT = cnt_value;
     510:	10 a2       	std	Z+32, r1	; 0x20
     512:	11 a2       	std	Z+33, r1	; 0x21
	tc_write_period(config->freq_opt.timer, 0xFFFF);
     514:	e9 89       	ldd	r30, Y+17	; 0x11
     516:	fa 89       	ldd	r31, Y+18	; 0x12
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
     518:	8f ef       	ldi	r24, 0xFF	; 255
     51a:	9f ef       	ldi	r25, 0xFF	; 255
     51c:	86 a3       	std	Z+38, r24	; 0x26
     51e:	97 a3       	std	Z+39, r25	; 0x27
	tc_enable_cc_channels(config->freq_opt.timer, TC_CCAEN);
     520:	e9 89       	ldd	r30, Y+17	; 0x11
     522:	fa 89       	ldd	r31, Y+18	; 0x12
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
     524:	e6 fd       	sbrc	r30, 6
     526:	04 c0       	rjmp	.+8      	; 0x530 <qdec_enabled+0x22c>
		((TC0_t *)tc)->CTRLB |= enablemask;
     528:	81 81       	ldd	r24, Z+1	; 0x01
     52a:	80 61       	ori	r24, 0x10	; 16
     52c:	81 83       	std	Z+1, r24	; 0x01
     52e:	03 c0       	rjmp	.+6      	; 0x536 <qdec_enabled+0x232>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
     530:	81 81       	ldd	r24, Z+1	; 0x01
     532:	80 61       	ori	r24, 0x10	; 16
     534:	81 83       	std	Z+1, r24	; 0x01
	tc_set_resolution(config->freq_opt.timer,
			(config->freq_opt.unit / 1000) / config->revolution);
     536:	6b 89       	ldd	r22, Y+19	; 0x13
     538:	7c 89       	ldd	r23, Y+20	; 0x14
     53a:	8d 89       	ldd	r24, Y+21	; 0x15
     53c:	9e 89       	ldd	r25, Y+22	; 0x16
     53e:	28 ee       	ldi	r18, 0xE8	; 232
     540:	33 e0       	ldi	r19, 0x03	; 3
     542:	40 e0       	ldi	r20, 0x00	; 0
     544:	50 e0       	ldi	r21, 0x00	; 0
     546:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__udivmodsi4>
			+ config->freq_opt.event_channel),
			TC_EVACT_FRQ_gc);
	tc_write_count(config->freq_opt.timer, 0);
	tc_write_period(config->freq_opt.timer, 0xFFFF);
	tc_enable_cc_channels(config->freq_opt.timer, TC_CCAEN);
	tc_set_resolution(config->freq_opt.timer,
     54a:	4d 84       	ldd	r4, Y+13	; 0x0d
     54c:	5e 84       	ldd	r5, Y+14	; 0x0e
     54e:	61 2c       	mov	r6, r1
     550:	71 2c       	mov	r7, r1
     552:	ca 01       	movw	r24, r20
     554:	b9 01       	movw	r22, r18
     556:	a3 01       	movw	r20, r6
     558:	92 01       	movw	r18, r4
     55a:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__udivmodsi4>
     55e:	e9 89       	ldd	r30, Y+17	; 0x11
     560:	fa 89       	ldd	r31, Y+18	; 0x12
 */
static inline void tc_set_resolution(volatile void *tc, uint32_t resolution)
{
	uint32_t tc_clk_rate = sysclk_get_per_hz();

	if (resolution <= (tc_clk_rate / 1024)) {
     562:	23 31       	cpi	r18, 0x13	; 19
     564:	8a e7       	ldi	r24, 0x7A	; 122
     566:	38 07       	cpc	r19, r24
     568:	41 05       	cpc	r20, r1
     56a:	51 05       	cpc	r21, r1
     56c:	28 f4       	brcc	.+10     	; 0x578 <qdec_enabled+0x274>
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
     56e:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
     570:	80 7f       	andi	r24, 0xF0	; 240
     572:	87 60       	ori	r24, 0x07	; 7
     574:	80 83       	st	Z, r24
     576:	3e c0       	rjmp	.+124    	; 0x5f4 <qdec_enabled+0x2f0>
{
	uint32_t tc_clk_rate = sysclk_get_per_hz();

	if (resolution <= (tc_clk_rate / 1024)) {
		tc_write_clock_source(tc, TC_CLKSEL_DIV1024_gc);
	} else if (resolution <= (tc_clk_rate / 256)) {
     578:	29 34       	cpi	r18, 0x49	; 73
     57a:	88 ee       	ldi	r24, 0xE8	; 232
     57c:	38 07       	cpc	r19, r24
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	48 07       	cpc	r20, r24
     582:	51 05       	cpc	r21, r1
     584:	28 f4       	brcc	.+10     	; 0x590 <qdec_enabled+0x28c>
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
     586:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
     588:	80 7f       	andi	r24, 0xF0	; 240
     58a:	86 60       	ori	r24, 0x06	; 6
     58c:	80 83       	st	Z, r24
     58e:	32 c0       	rjmp	.+100    	; 0x5f4 <qdec_enabled+0x2f0>

	if (resolution <= (tc_clk_rate / 1024)) {
		tc_write_clock_source(tc, TC_CLKSEL_DIV1024_gc);
	} else if (resolution <= (tc_clk_rate / 256)) {
		tc_write_clock_source(tc, TC_CLKSEL_DIV256_gc);
	} else if (resolution <= (tc_clk_rate / 64)) {
     590:	21 32       	cpi	r18, 0x21	; 33
     592:	81 ea       	ldi	r24, 0xA1	; 161
     594:	38 07       	cpc	r19, r24
     596:	87 e0       	ldi	r24, 0x07	; 7
     598:	48 07       	cpc	r20, r24
     59a:	51 05       	cpc	r21, r1
     59c:	28 f4       	brcc	.+10     	; 0x5a8 <qdec_enabled+0x2a4>
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
     59e:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
     5a0:	80 7f       	andi	r24, 0xF0	; 240
     5a2:	85 60       	ori	r24, 0x05	; 5
     5a4:	80 83       	st	Z, r24
     5a6:	26 c0       	rjmp	.+76     	; 0x5f4 <qdec_enabled+0x2f0>
		tc_write_clock_source(tc, TC_CLKSEL_DIV1024_gc);
	} else if (resolution <= (tc_clk_rate / 256)) {
		tc_write_clock_source(tc, TC_CLKSEL_DIV256_gc);
	} else if (resolution <= (tc_clk_rate / 64)) {
		tc_write_clock_source(tc, TC_CLKSEL_DIV64_gc);
	} else if (resolution <= (tc_clk_rate / 8)) {
     5a8:	21 30       	cpi	r18, 0x01	; 1
     5aa:	89 e0       	ldi	r24, 0x09	; 9
     5ac:	38 07       	cpc	r19, r24
     5ae:	8d e3       	ldi	r24, 0x3D	; 61
     5b0:	48 07       	cpc	r20, r24
     5b2:	51 05       	cpc	r21, r1
     5b4:	28 f4       	brcc	.+10     	; 0x5c0 <qdec_enabled+0x2bc>
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
     5b6:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
     5b8:	80 7f       	andi	r24, 0xF0	; 240
     5ba:	84 60       	ori	r24, 0x04	; 4
     5bc:	80 83       	st	Z, r24
     5be:	1a c0       	rjmp	.+52     	; 0x5f4 <qdec_enabled+0x2f0>
		tc_write_clock_source(tc, TC_CLKSEL_DIV256_gc);
	} else if (resolution <= (tc_clk_rate / 64)) {
		tc_write_clock_source(tc, TC_CLKSEL_DIV64_gc);
	} else if (resolution <= (tc_clk_rate / 8)) {
		tc_write_clock_source(tc, TC_CLKSEL_DIV8_gc);
	} else if (resolution <= (tc_clk_rate / 4)) {
     5c0:	21 30       	cpi	r18, 0x01	; 1
     5c2:	82 e1       	ldi	r24, 0x12	; 18
     5c4:	38 07       	cpc	r19, r24
     5c6:	8a e7       	ldi	r24, 0x7A	; 122
     5c8:	48 07       	cpc	r20, r24
     5ca:	51 05       	cpc	r21, r1
     5cc:	28 f4       	brcc	.+10     	; 0x5d8 <qdec_enabled+0x2d4>
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
     5ce:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
     5d0:	80 7f       	andi	r24, 0xF0	; 240
     5d2:	83 60       	ori	r24, 0x03	; 3
     5d4:	80 83       	st	Z, r24
     5d6:	0e c0       	rjmp	.+28     	; 0x5f4 <qdec_enabled+0x2f0>
		tc_write_clock_source(tc, TC_CLKSEL_DIV64_gc);
	} else if (resolution <= (tc_clk_rate / 8)) {
		tc_write_clock_source(tc, TC_CLKSEL_DIV8_gc);
	} else if (resolution <= (tc_clk_rate / 4)) {
		tc_write_clock_source(tc, TC_CLKSEL_DIV4_gc);
	} else if (resolution <= (tc_clk_rate / 2)) {
     5d8:	21 30       	cpi	r18, 0x01	; 1
     5da:	34 42       	sbci	r19, 0x24	; 36
     5dc:	44 4f       	sbci	r20, 0xF4	; 244
     5de:	51 05       	cpc	r21, r1
     5e0:	28 f4       	brcc	.+10     	; 0x5ec <qdec_enabled+0x2e8>
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
     5e2:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
     5e4:	80 7f       	andi	r24, 0xF0	; 240
     5e6:	82 60       	ori	r24, 0x02	; 2
     5e8:	80 83       	st	Z, r24
     5ea:	04 c0       	rjmp	.+8      	; 0x5f4 <qdec_enabled+0x2f0>
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
     5ec:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
     5ee:	80 7f       	andi	r24, 0xF0	; 240
     5f0:	81 60       	ori	r24, 0x01	; 1
     5f2:	80 83       	st	Z, r24
			(config->freq_opt.unit / 1000) / config->revolution);
	config->freq_opt.coef
			= (((uint64_t)tc_get_resolution(config->freq_opt.timer) * 1000)
     5f4:	e9 89       	ldd	r30, Y+17	; 0x11
     5f6:	fa 89       	ldd	r31, Y+18	; 0x12
 * \param tc Pointer to TC module.
 * \return TC_CLKSEL_enum Clock source selection
 */
static inline TC_CLKSEL_t tc_read_clock_source(volatile void *tc)
{
	return (TC_CLKSEL_t)(((TC0_t *)tc)->CTRLA & TC0_CLKSEL_gm);
     5f8:	80 81       	ld	r24, Z
     5fa:	8f 70       	andi	r24, 0x0F	; 15
 * \return The resolution of \a tc.
 */
static inline uint32_t tc_get_resolution(volatile void *tc)
{
	uint32_t tc_clk_rate = sysclk_get_per_hz();
	switch (tc_read_clock_source(tc)) {
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	fc 01       	movw	r30, r24
     600:	31 97       	sbiw	r30, 0x01	; 1
     602:	e7 30       	cpi	r30, 0x07	; 7
     604:	f1 05       	cpc	r31, r1
     606:	38 f5       	brcc	.+78     	; 0x656 <qdec_enabled+0x352>
     608:	e2 50       	subi	r30, 0x02	; 2
     60a:	ff 4f       	sbci	r31, 0xFF	; 255
     60c:	0c 94 ee 0e 	jmp	0x1ddc	; 0x1ddc <__tablejump2__>
 *
 * \return The resolution of \a tc.
 */
static inline uint32_t tc_get_resolution(volatile void *tc)
{
	uint32_t tc_clk_rate = sysclk_get_per_hz();
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	98 e4       	ldi	r25, 0x48	; 72
     614:	a8 ee       	ldi	r26, 0xE8	; 232
     616:	b1 e0       	ldi	r27, 0x01	; 1
     618:	21 c0       	rjmp	.+66     	; 0x65c <qdec_enabled+0x358>
	case TC_CLKSEL_OFF_gc:
		tc_clk_rate = 0;
		break;

	case TC_CLKSEL_DIV1024_gc:
		tc_clk_rate /= 1024;
     61a:	82 e1       	ldi	r24, 0x12	; 18
     61c:	9a e7       	ldi	r25, 0x7A	; 122
     61e:	a0 e0       	ldi	r26, 0x00	; 0
     620:	b0 e0       	ldi	r27, 0x00	; 0
     622:	1c c0       	rjmp	.+56     	; 0x65c <qdec_enabled+0x358>
		break;

	case TC_CLKSEL_DIV256_gc:
		tc_clk_rate /= 256;
     624:	88 e4       	ldi	r24, 0x48	; 72
     626:	98 ee       	ldi	r25, 0xE8	; 232
     628:	a1 e0       	ldi	r26, 0x01	; 1
     62a:	b0 e0       	ldi	r27, 0x00	; 0
     62c:	17 c0       	rjmp	.+46     	; 0x65c <qdec_enabled+0x358>
		break;

	case TC_CLKSEL_DIV64_gc:
		tc_clk_rate /= 64;
     62e:	80 e2       	ldi	r24, 0x20	; 32
     630:	91 ea       	ldi	r25, 0xA1	; 161
     632:	a7 e0       	ldi	r26, 0x07	; 7
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	12 c0       	rjmp	.+36     	; 0x65c <qdec_enabled+0x358>
		break;

	case TC_CLKSEL_DIV8_gc:
		tc_clk_rate /= 8;
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	99 e0       	ldi	r25, 0x09	; 9
     63c:	ad e3       	ldi	r26, 0x3D	; 61
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	0d c0       	rjmp	.+26     	; 0x65c <qdec_enabled+0x358>
		break;

	case TC_CLKSEL_DIV4_gc:
		tc_clk_rate /= 4;
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	92 e1       	ldi	r25, 0x12	; 18
     646:	aa e7       	ldi	r26, 0x7A	; 122
     648:	b0 e0       	ldi	r27, 0x00	; 0
     64a:	08 c0       	rjmp	.+16     	; 0x65c <qdec_enabled+0x358>
		break;

	case TC_CLKSEL_DIV2_gc:
		tc_clk_rate /= 2;
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	94 e2       	ldi	r25, 0x24	; 36
     650:	a4 ef       	ldi	r26, 0xF4	; 244
     652:	b0 e0       	ldi	r27, 0x00	; 0
     654:	03 c0       	rjmp	.+6      	; 0x65c <qdec_enabled+0x358>
static inline uint32_t tc_get_resolution(volatile void *tc)
{
	uint32_t tc_clk_rate = sysclk_get_per_hz();
	switch (tc_read_clock_source(tc)) {
	case TC_CLKSEL_OFF_gc:
		tc_clk_rate = 0;
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	dc 01       	movw	r26, r24
     65c:	1c 01       	movw	r2, r24
     65e:	2d 01       	movw	r4, r26
     660:	28 2f       	mov	r18, r24
     662:	33 2d       	mov	r19, r3
     664:	44 2d       	mov	r20, r4
     666:	55 2d       	mov	r21, r5
     668:	60 e0       	ldi	r22, 0x00	; 0
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	06 e0       	ldi	r16, 0x06	; 6
     672:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__ashldi3>
     676:	a2 2c       	mov	r10, r2
     678:	b3 2c       	mov	r11, r3
     67a:	c4 2c       	mov	r12, r4
     67c:	d5 2c       	mov	r13, r5
     67e:	e1 2c       	mov	r14, r1
     680:	f1 2c       	mov	r15, r1
     682:	00 e0       	ldi	r16, 0x00	; 0
     684:	10 e0       	ldi	r17, 0x00	; 0
     686:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__subdi3>
     68a:	01 e0       	ldi	r16, 0x01	; 1
     68c:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__ashldi3>
     690:	00 e0       	ldi	r16, 0x00	; 0
     692:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__subdi3>
     696:	03 e0       	ldi	r16, 0x03	; 3
     698:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__ashldi3>
			/ config->freq_opt.unit)
     69c:	cb 88       	ldd	r12, Y+19	; 0x13
     69e:	dc 88       	ldd	r13, Y+20	; 0x14
     6a0:	ed 88       	ldd	r14, Y+21	; 0x15
     6a2:	fe 88       	ldd	r15, Y+22	; 0x16
     6a4:	16 01       	movw	r2, r12
     6a6:	27 01       	movw	r4, r14
     6a8:	ac 2c       	mov	r10, r12
     6aa:	b3 2c       	mov	r11, r3
     6ac:	c4 2c       	mov	r12, r4
     6ae:	d5 2c       	mov	r13, r5
     6b0:	e1 2c       	mov	r14, r1
     6b2:	f1 2c       	mov	r15, r1
     6b4:	00 e0       	ldi	r16, 0x00	; 0
     6b6:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__udivdi3>
			* 4
     6ba:	02 e0       	ldi	r16, 0x02	; 2
     6bc:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__ashldi3>
			/ config->revolution;
     6c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     6c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     6c4:	a2 2c       	mov	r10, r2
     6c6:	b3 2c       	mov	r11, r3
     6c8:	c1 2c       	mov	r12, r1
     6ca:	d1 2c       	mov	r13, r1
     6cc:	00 e0       	ldi	r16, 0x00	; 0
     6ce:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__udivdi3>
	tc_write_period(config->freq_opt.timer, 0xFFFF);
	tc_enable_cc_channels(config->freq_opt.timer, TC_CCAEN);
	tc_set_resolution(config->freq_opt.timer,
			(config->freq_opt.unit / 1000) / config->revolution);
	config->freq_opt.coef
			= (((uint64_t)tc_get_resolution(config->freq_opt.timer) * 1000)
     6d2:	2f 8b       	std	Y+23, r18	; 0x17
     6d4:	38 8f       	std	Y+24, r19	; 0x18
     6d6:	49 8f       	std	Y+25, r20	; 0x19
     6d8:	5a 8f       	std	Y+26, r21	; 0x1a
			/ config->freq_opt.unit)
			* 4
			/ config->revolution;
	config->freq_opt.last_freq = 0; /* Initialize frequence to 0Hz */
     6da:	1b 8e       	std	Y+27, r1	; 0x1b
     6dc:	1c 8e       	std	Y+28, r1	; 0x1c
	qdec_enabled_evsys(config);
	qdec_enabled_tc(config);
	if (config->freq_opt.enabled) {
		qdec_enabled_tc_freq(config);
	}
}
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	1f 91       	pop	r17
     6e4:	0f 91       	pop	r16
     6e6:	ff 90       	pop	r15
     6e8:	ef 90       	pop	r14
     6ea:	df 90       	pop	r13
     6ec:	cf 90       	pop	r12
     6ee:	bf 90       	pop	r11
     6f0:	af 90       	pop	r10
     6f2:	9f 90       	pop	r9
     6f4:	8f 90       	pop	r8
     6f6:	7f 90       	pop	r7
     6f8:	6f 90       	pop	r6
     6fa:	5f 90       	pop	r5
     6fc:	4f 90       	pop	r4
     6fe:	3f 90       	pop	r3
     700:	2f 90       	pop	r2
     702:	08 95       	ret

00000704 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     704:	1f 92       	push	r1
     706:	0f 92       	push	r0
     708:	0f b6       	in	r0, 0x3f	; 63
     70a:	0f 92       	push	r0
     70c:	11 24       	eor	r1, r1
     70e:	0b b6       	in	r0, 0x3b	; 59
     710:	0f 92       	push	r0
     712:	2f 93       	push	r18
     714:	3f 93       	push	r19
     716:	4f 93       	push	r20
     718:	5f 93       	push	r21
     71a:	6f 93       	push	r22
     71c:	7f 93       	push	r23
     71e:	8f 93       	push	r24
     720:	9f 93       	push	r25
     722:	af 93       	push	r26
     724:	bf 93       	push	r27
     726:	ef 93       	push	r30
     728:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     72a:	e0 91 38 20 	lds	r30, 0x2038
     72e:	f0 91 39 20 	lds	r31, 0x2039
     732:	30 97       	sbiw	r30, 0x00	; 0
     734:	09 f0       	breq	.+2      	; 0x738 <__vector_14+0x34>
		tc_tcc0_ovf_callback();
     736:	09 95       	icall
	}
}
     738:	ff 91       	pop	r31
     73a:	ef 91       	pop	r30
     73c:	bf 91       	pop	r27
     73e:	af 91       	pop	r26
     740:	9f 91       	pop	r25
     742:	8f 91       	pop	r24
     744:	7f 91       	pop	r23
     746:	6f 91       	pop	r22
     748:	5f 91       	pop	r21
     74a:	4f 91       	pop	r20
     74c:	3f 91       	pop	r19
     74e:	2f 91       	pop	r18
     750:	0f 90       	pop	r0
     752:	0b be       	out	0x3b, r0	; 59
     754:	0f 90       	pop	r0
     756:	0f be       	out	0x3f, r0	; 63
     758:	0f 90       	pop	r0
     75a:	1f 90       	pop	r1
     75c:	18 95       	reti

0000075e <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     75e:	1f 92       	push	r1
     760:	0f 92       	push	r0
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	0f 92       	push	r0
     766:	11 24       	eor	r1, r1
     768:	0b b6       	in	r0, 0x3b	; 59
     76a:	0f 92       	push	r0
     76c:	2f 93       	push	r18
     76e:	3f 93       	push	r19
     770:	4f 93       	push	r20
     772:	5f 93       	push	r21
     774:	6f 93       	push	r22
     776:	7f 93       	push	r23
     778:	8f 93       	push	r24
     77a:	9f 93       	push	r25
     77c:	af 93       	push	r26
     77e:	bf 93       	push	r27
     780:	ef 93       	push	r30
     782:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     784:	e0 91 36 20 	lds	r30, 0x2036
     788:	f0 91 37 20 	lds	r31, 0x2037
     78c:	30 97       	sbiw	r30, 0x00	; 0
     78e:	09 f0       	breq	.+2      	; 0x792 <__vector_15+0x34>
		tc_tcc0_err_callback();
     790:	09 95       	icall
	}
}
     792:	ff 91       	pop	r31
     794:	ef 91       	pop	r30
     796:	bf 91       	pop	r27
     798:	af 91       	pop	r26
     79a:	9f 91       	pop	r25
     79c:	8f 91       	pop	r24
     79e:	7f 91       	pop	r23
     7a0:	6f 91       	pop	r22
     7a2:	5f 91       	pop	r21
     7a4:	4f 91       	pop	r20
     7a6:	3f 91       	pop	r19
     7a8:	2f 91       	pop	r18
     7aa:	0f 90       	pop	r0
     7ac:	0b be       	out	0x3b, r0	; 59
     7ae:	0f 90       	pop	r0
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	0f 90       	pop	r0
     7b4:	1f 90       	pop	r1
     7b6:	18 95       	reti

000007b8 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     7b8:	1f 92       	push	r1
     7ba:	0f 92       	push	r0
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	0f 92       	push	r0
     7c0:	11 24       	eor	r1, r1
     7c2:	0b b6       	in	r0, 0x3b	; 59
     7c4:	0f 92       	push	r0
     7c6:	2f 93       	push	r18
     7c8:	3f 93       	push	r19
     7ca:	4f 93       	push	r20
     7cc:	5f 93       	push	r21
     7ce:	6f 93       	push	r22
     7d0:	7f 93       	push	r23
     7d2:	8f 93       	push	r24
     7d4:	9f 93       	push	r25
     7d6:	af 93       	push	r26
     7d8:	bf 93       	push	r27
     7da:	ef 93       	push	r30
     7dc:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     7de:	e0 91 34 20 	lds	r30, 0x2034
     7e2:	f0 91 35 20 	lds	r31, 0x2035
     7e6:	30 97       	sbiw	r30, 0x00	; 0
     7e8:	09 f0       	breq	.+2      	; 0x7ec <__vector_16+0x34>
		tc_tcc0_cca_callback();
     7ea:	09 95       	icall
	}
}
     7ec:	ff 91       	pop	r31
     7ee:	ef 91       	pop	r30
     7f0:	bf 91       	pop	r27
     7f2:	af 91       	pop	r26
     7f4:	9f 91       	pop	r25
     7f6:	8f 91       	pop	r24
     7f8:	7f 91       	pop	r23
     7fa:	6f 91       	pop	r22
     7fc:	5f 91       	pop	r21
     7fe:	4f 91       	pop	r20
     800:	3f 91       	pop	r19
     802:	2f 91       	pop	r18
     804:	0f 90       	pop	r0
     806:	0b be       	out	0x3b, r0	; 59
     808:	0f 90       	pop	r0
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	0f 90       	pop	r0
     80e:	1f 90       	pop	r1
     810:	18 95       	reti

00000812 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     812:	1f 92       	push	r1
     814:	0f 92       	push	r0
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	0f 92       	push	r0
     81a:	11 24       	eor	r1, r1
     81c:	0b b6       	in	r0, 0x3b	; 59
     81e:	0f 92       	push	r0
     820:	2f 93       	push	r18
     822:	3f 93       	push	r19
     824:	4f 93       	push	r20
     826:	5f 93       	push	r21
     828:	6f 93       	push	r22
     82a:	7f 93       	push	r23
     82c:	8f 93       	push	r24
     82e:	9f 93       	push	r25
     830:	af 93       	push	r26
     832:	bf 93       	push	r27
     834:	ef 93       	push	r30
     836:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     838:	e0 91 32 20 	lds	r30, 0x2032
     83c:	f0 91 33 20 	lds	r31, 0x2033
     840:	30 97       	sbiw	r30, 0x00	; 0
     842:	09 f0       	breq	.+2      	; 0x846 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
     844:	09 95       	icall
	}
}
     846:	ff 91       	pop	r31
     848:	ef 91       	pop	r30
     84a:	bf 91       	pop	r27
     84c:	af 91       	pop	r26
     84e:	9f 91       	pop	r25
     850:	8f 91       	pop	r24
     852:	7f 91       	pop	r23
     854:	6f 91       	pop	r22
     856:	5f 91       	pop	r21
     858:	4f 91       	pop	r20
     85a:	3f 91       	pop	r19
     85c:	2f 91       	pop	r18
     85e:	0f 90       	pop	r0
     860:	0b be       	out	0x3b, r0	; 59
     862:	0f 90       	pop	r0
     864:	0f be       	out	0x3f, r0	; 63
     866:	0f 90       	pop	r0
     868:	1f 90       	pop	r1
     86a:	18 95       	reti

0000086c <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     86c:	1f 92       	push	r1
     86e:	0f 92       	push	r0
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	0f 92       	push	r0
     874:	11 24       	eor	r1, r1
     876:	0b b6       	in	r0, 0x3b	; 59
     878:	0f 92       	push	r0
     87a:	2f 93       	push	r18
     87c:	3f 93       	push	r19
     87e:	4f 93       	push	r20
     880:	5f 93       	push	r21
     882:	6f 93       	push	r22
     884:	7f 93       	push	r23
     886:	8f 93       	push	r24
     888:	9f 93       	push	r25
     88a:	af 93       	push	r26
     88c:	bf 93       	push	r27
     88e:	ef 93       	push	r30
     890:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     892:	e0 91 30 20 	lds	r30, 0x2030
     896:	f0 91 31 20 	lds	r31, 0x2031
     89a:	30 97       	sbiw	r30, 0x00	; 0
     89c:	09 f0       	breq	.+2      	; 0x8a0 <__vector_18+0x34>
		tc_tcc0_ccc_callback();
     89e:	09 95       	icall
	}
}
     8a0:	ff 91       	pop	r31
     8a2:	ef 91       	pop	r30
     8a4:	bf 91       	pop	r27
     8a6:	af 91       	pop	r26
     8a8:	9f 91       	pop	r25
     8aa:	8f 91       	pop	r24
     8ac:	7f 91       	pop	r23
     8ae:	6f 91       	pop	r22
     8b0:	5f 91       	pop	r21
     8b2:	4f 91       	pop	r20
     8b4:	3f 91       	pop	r19
     8b6:	2f 91       	pop	r18
     8b8:	0f 90       	pop	r0
     8ba:	0b be       	out	0x3b, r0	; 59
     8bc:	0f 90       	pop	r0
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	0f 90       	pop	r0
     8c2:	1f 90       	pop	r1
     8c4:	18 95       	reti

000008c6 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     8c6:	1f 92       	push	r1
     8c8:	0f 92       	push	r0
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	0f 92       	push	r0
     8ce:	11 24       	eor	r1, r1
     8d0:	0b b6       	in	r0, 0x3b	; 59
     8d2:	0f 92       	push	r0
     8d4:	2f 93       	push	r18
     8d6:	3f 93       	push	r19
     8d8:	4f 93       	push	r20
     8da:	5f 93       	push	r21
     8dc:	6f 93       	push	r22
     8de:	7f 93       	push	r23
     8e0:	8f 93       	push	r24
     8e2:	9f 93       	push	r25
     8e4:	af 93       	push	r26
     8e6:	bf 93       	push	r27
     8e8:	ef 93       	push	r30
     8ea:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     8ec:	e0 91 2e 20 	lds	r30, 0x202E
     8f0:	f0 91 2f 20 	lds	r31, 0x202F
     8f4:	30 97       	sbiw	r30, 0x00	; 0
     8f6:	09 f0       	breq	.+2      	; 0x8fa <__vector_19+0x34>
		tc_tcc0_ccd_callback();
     8f8:	09 95       	icall
	}
}
     8fa:	ff 91       	pop	r31
     8fc:	ef 91       	pop	r30
     8fe:	bf 91       	pop	r27
     900:	af 91       	pop	r26
     902:	9f 91       	pop	r25
     904:	8f 91       	pop	r24
     906:	7f 91       	pop	r23
     908:	6f 91       	pop	r22
     90a:	5f 91       	pop	r21
     90c:	4f 91       	pop	r20
     90e:	3f 91       	pop	r19
     910:	2f 91       	pop	r18
     912:	0f 90       	pop	r0
     914:	0b be       	out	0x3b, r0	; 59
     916:	0f 90       	pop	r0
     918:	0f be       	out	0x3f, r0	; 63
     91a:	0f 90       	pop	r0
     91c:	1f 90       	pop	r1
     91e:	18 95       	reti

00000920 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     920:	1f 92       	push	r1
     922:	0f 92       	push	r0
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	0f 92       	push	r0
     928:	11 24       	eor	r1, r1
     92a:	0b b6       	in	r0, 0x3b	; 59
     92c:	0f 92       	push	r0
     92e:	2f 93       	push	r18
     930:	3f 93       	push	r19
     932:	4f 93       	push	r20
     934:	5f 93       	push	r21
     936:	6f 93       	push	r22
     938:	7f 93       	push	r23
     93a:	8f 93       	push	r24
     93c:	9f 93       	push	r25
     93e:	af 93       	push	r26
     940:	bf 93       	push	r27
     942:	ef 93       	push	r30
     944:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     946:	e0 91 2c 20 	lds	r30, 0x202C
     94a:	f0 91 2d 20 	lds	r31, 0x202D
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	09 f0       	breq	.+2      	; 0x954 <__vector_20+0x34>
		tc_tcc1_ovf_callback();
     952:	09 95       	icall
	}
}
     954:	ff 91       	pop	r31
     956:	ef 91       	pop	r30
     958:	bf 91       	pop	r27
     95a:	af 91       	pop	r26
     95c:	9f 91       	pop	r25
     95e:	8f 91       	pop	r24
     960:	7f 91       	pop	r23
     962:	6f 91       	pop	r22
     964:	5f 91       	pop	r21
     966:	4f 91       	pop	r20
     968:	3f 91       	pop	r19
     96a:	2f 91       	pop	r18
     96c:	0f 90       	pop	r0
     96e:	0b be       	out	0x3b, r0	; 59
     970:	0f 90       	pop	r0
     972:	0f be       	out	0x3f, r0	; 63
     974:	0f 90       	pop	r0
     976:	1f 90       	pop	r1
     978:	18 95       	reti

0000097a <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     97a:	1f 92       	push	r1
     97c:	0f 92       	push	r0
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	0f 92       	push	r0
     982:	11 24       	eor	r1, r1
     984:	0b b6       	in	r0, 0x3b	; 59
     986:	0f 92       	push	r0
     988:	2f 93       	push	r18
     98a:	3f 93       	push	r19
     98c:	4f 93       	push	r20
     98e:	5f 93       	push	r21
     990:	6f 93       	push	r22
     992:	7f 93       	push	r23
     994:	8f 93       	push	r24
     996:	9f 93       	push	r25
     998:	af 93       	push	r26
     99a:	bf 93       	push	r27
     99c:	ef 93       	push	r30
     99e:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     9a0:	e0 91 2a 20 	lds	r30, 0x202A
     9a4:	f0 91 2b 20 	lds	r31, 0x202B
     9a8:	30 97       	sbiw	r30, 0x00	; 0
     9aa:	09 f0       	breq	.+2      	; 0x9ae <__vector_21+0x34>
		tc_tcc1_err_callback();
     9ac:	09 95       	icall
	}
}
     9ae:	ff 91       	pop	r31
     9b0:	ef 91       	pop	r30
     9b2:	bf 91       	pop	r27
     9b4:	af 91       	pop	r26
     9b6:	9f 91       	pop	r25
     9b8:	8f 91       	pop	r24
     9ba:	7f 91       	pop	r23
     9bc:	6f 91       	pop	r22
     9be:	5f 91       	pop	r21
     9c0:	4f 91       	pop	r20
     9c2:	3f 91       	pop	r19
     9c4:	2f 91       	pop	r18
     9c6:	0f 90       	pop	r0
     9c8:	0b be       	out	0x3b, r0	; 59
     9ca:	0f 90       	pop	r0
     9cc:	0f be       	out	0x3f, r0	; 63
     9ce:	0f 90       	pop	r0
     9d0:	1f 90       	pop	r1
     9d2:	18 95       	reti

000009d4 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     9d4:	1f 92       	push	r1
     9d6:	0f 92       	push	r0
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	0f 92       	push	r0
     9dc:	11 24       	eor	r1, r1
     9de:	0b b6       	in	r0, 0x3b	; 59
     9e0:	0f 92       	push	r0
     9e2:	2f 93       	push	r18
     9e4:	3f 93       	push	r19
     9e6:	4f 93       	push	r20
     9e8:	5f 93       	push	r21
     9ea:	6f 93       	push	r22
     9ec:	7f 93       	push	r23
     9ee:	8f 93       	push	r24
     9f0:	9f 93       	push	r25
     9f2:	af 93       	push	r26
     9f4:	bf 93       	push	r27
     9f6:	ef 93       	push	r30
     9f8:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     9fa:	e0 91 28 20 	lds	r30, 0x2028
     9fe:	f0 91 29 20 	lds	r31, 0x2029
     a02:	30 97       	sbiw	r30, 0x00	; 0
     a04:	09 f0       	breq	.+2      	; 0xa08 <__vector_22+0x34>
		tc_tcc1_cca_callback();
     a06:	09 95       	icall
	}
}
     a08:	ff 91       	pop	r31
     a0a:	ef 91       	pop	r30
     a0c:	bf 91       	pop	r27
     a0e:	af 91       	pop	r26
     a10:	9f 91       	pop	r25
     a12:	8f 91       	pop	r24
     a14:	7f 91       	pop	r23
     a16:	6f 91       	pop	r22
     a18:	5f 91       	pop	r21
     a1a:	4f 91       	pop	r20
     a1c:	3f 91       	pop	r19
     a1e:	2f 91       	pop	r18
     a20:	0f 90       	pop	r0
     a22:	0b be       	out	0x3b, r0	; 59
     a24:	0f 90       	pop	r0
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	0f 90       	pop	r0
     a2a:	1f 90       	pop	r1
     a2c:	18 95       	reti

00000a2e <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     a2e:	1f 92       	push	r1
     a30:	0f 92       	push	r0
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	0f 92       	push	r0
     a36:	11 24       	eor	r1, r1
     a38:	0b b6       	in	r0, 0x3b	; 59
     a3a:	0f 92       	push	r0
     a3c:	2f 93       	push	r18
     a3e:	3f 93       	push	r19
     a40:	4f 93       	push	r20
     a42:	5f 93       	push	r21
     a44:	6f 93       	push	r22
     a46:	7f 93       	push	r23
     a48:	8f 93       	push	r24
     a4a:	9f 93       	push	r25
     a4c:	af 93       	push	r26
     a4e:	bf 93       	push	r27
     a50:	ef 93       	push	r30
     a52:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     a54:	e0 91 26 20 	lds	r30, 0x2026
     a58:	f0 91 27 20 	lds	r31, 0x2027
     a5c:	30 97       	sbiw	r30, 0x00	; 0
     a5e:	09 f0       	breq	.+2      	; 0xa62 <__vector_23+0x34>
		tc_tcc1_ccb_callback();
     a60:	09 95       	icall
	}
}
     a62:	ff 91       	pop	r31
     a64:	ef 91       	pop	r30
     a66:	bf 91       	pop	r27
     a68:	af 91       	pop	r26
     a6a:	9f 91       	pop	r25
     a6c:	8f 91       	pop	r24
     a6e:	7f 91       	pop	r23
     a70:	6f 91       	pop	r22
     a72:	5f 91       	pop	r21
     a74:	4f 91       	pop	r20
     a76:	3f 91       	pop	r19
     a78:	2f 91       	pop	r18
     a7a:	0f 90       	pop	r0
     a7c:	0b be       	out	0x3b, r0	; 59
     a7e:	0f 90       	pop	r0
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	0f 90       	pop	r0
     a84:	1f 90       	pop	r1
     a86:	18 95       	reti

00000a88 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     a88:	1f 92       	push	r1
     a8a:	0f 92       	push	r0
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	0f 92       	push	r0
     a90:	11 24       	eor	r1, r1
     a92:	0b b6       	in	r0, 0x3b	; 59
     a94:	0f 92       	push	r0
     a96:	2f 93       	push	r18
     a98:	3f 93       	push	r19
     a9a:	4f 93       	push	r20
     a9c:	5f 93       	push	r21
     a9e:	6f 93       	push	r22
     aa0:	7f 93       	push	r23
     aa2:	8f 93       	push	r24
     aa4:	9f 93       	push	r25
     aa6:	af 93       	push	r26
     aa8:	bf 93       	push	r27
     aaa:	ef 93       	push	r30
     aac:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     aae:	e0 91 24 20 	lds	r30, 0x2024
     ab2:	f0 91 25 20 	lds	r31, 0x2025
     ab6:	30 97       	sbiw	r30, 0x00	; 0
     ab8:	09 f0       	breq	.+2      	; 0xabc <__vector_77+0x34>
		tc_tcd0_ovf_callback();
     aba:	09 95       	icall
	}
}
     abc:	ff 91       	pop	r31
     abe:	ef 91       	pop	r30
     ac0:	bf 91       	pop	r27
     ac2:	af 91       	pop	r26
     ac4:	9f 91       	pop	r25
     ac6:	8f 91       	pop	r24
     ac8:	7f 91       	pop	r23
     aca:	6f 91       	pop	r22
     acc:	5f 91       	pop	r21
     ace:	4f 91       	pop	r20
     ad0:	3f 91       	pop	r19
     ad2:	2f 91       	pop	r18
     ad4:	0f 90       	pop	r0
     ad6:	0b be       	out	0x3b, r0	; 59
     ad8:	0f 90       	pop	r0
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	0f 90       	pop	r0
     ade:	1f 90       	pop	r1
     ae0:	18 95       	reti

00000ae2 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     ae2:	1f 92       	push	r1
     ae4:	0f 92       	push	r0
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	0f 92       	push	r0
     aea:	11 24       	eor	r1, r1
     aec:	0b b6       	in	r0, 0x3b	; 59
     aee:	0f 92       	push	r0
     af0:	2f 93       	push	r18
     af2:	3f 93       	push	r19
     af4:	4f 93       	push	r20
     af6:	5f 93       	push	r21
     af8:	6f 93       	push	r22
     afa:	7f 93       	push	r23
     afc:	8f 93       	push	r24
     afe:	9f 93       	push	r25
     b00:	af 93       	push	r26
     b02:	bf 93       	push	r27
     b04:	ef 93       	push	r30
     b06:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     b08:	e0 91 22 20 	lds	r30, 0x2022
     b0c:	f0 91 23 20 	lds	r31, 0x2023
     b10:	30 97       	sbiw	r30, 0x00	; 0
     b12:	09 f0       	breq	.+2      	; 0xb16 <__vector_78+0x34>
		tc_tcd0_err_callback();
     b14:	09 95       	icall
	}
}
     b16:	ff 91       	pop	r31
     b18:	ef 91       	pop	r30
     b1a:	bf 91       	pop	r27
     b1c:	af 91       	pop	r26
     b1e:	9f 91       	pop	r25
     b20:	8f 91       	pop	r24
     b22:	7f 91       	pop	r23
     b24:	6f 91       	pop	r22
     b26:	5f 91       	pop	r21
     b28:	4f 91       	pop	r20
     b2a:	3f 91       	pop	r19
     b2c:	2f 91       	pop	r18
     b2e:	0f 90       	pop	r0
     b30:	0b be       	out	0x3b, r0	; 59
     b32:	0f 90       	pop	r0
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	0f 90       	pop	r0
     b38:	1f 90       	pop	r1
     b3a:	18 95       	reti

00000b3c <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     b3c:	1f 92       	push	r1
     b3e:	0f 92       	push	r0
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	0f 92       	push	r0
     b44:	11 24       	eor	r1, r1
     b46:	0b b6       	in	r0, 0x3b	; 59
     b48:	0f 92       	push	r0
     b4a:	2f 93       	push	r18
     b4c:	3f 93       	push	r19
     b4e:	4f 93       	push	r20
     b50:	5f 93       	push	r21
     b52:	6f 93       	push	r22
     b54:	7f 93       	push	r23
     b56:	8f 93       	push	r24
     b58:	9f 93       	push	r25
     b5a:	af 93       	push	r26
     b5c:	bf 93       	push	r27
     b5e:	ef 93       	push	r30
     b60:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     b62:	e0 91 20 20 	lds	r30, 0x2020
     b66:	f0 91 21 20 	lds	r31, 0x2021
     b6a:	30 97       	sbiw	r30, 0x00	; 0
     b6c:	09 f0       	breq	.+2      	; 0xb70 <__vector_79+0x34>
		tc_tcd0_cca_callback();
     b6e:	09 95       	icall
	}
}
     b70:	ff 91       	pop	r31
     b72:	ef 91       	pop	r30
     b74:	bf 91       	pop	r27
     b76:	af 91       	pop	r26
     b78:	9f 91       	pop	r25
     b7a:	8f 91       	pop	r24
     b7c:	7f 91       	pop	r23
     b7e:	6f 91       	pop	r22
     b80:	5f 91       	pop	r21
     b82:	4f 91       	pop	r20
     b84:	3f 91       	pop	r19
     b86:	2f 91       	pop	r18
     b88:	0f 90       	pop	r0
     b8a:	0b be       	out	0x3b, r0	; 59
     b8c:	0f 90       	pop	r0
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	0f 90       	pop	r0
     b92:	1f 90       	pop	r1
     b94:	18 95       	reti

00000b96 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     b96:	1f 92       	push	r1
     b98:	0f 92       	push	r0
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	0f 92       	push	r0
     b9e:	11 24       	eor	r1, r1
     ba0:	0b b6       	in	r0, 0x3b	; 59
     ba2:	0f 92       	push	r0
     ba4:	2f 93       	push	r18
     ba6:	3f 93       	push	r19
     ba8:	4f 93       	push	r20
     baa:	5f 93       	push	r21
     bac:	6f 93       	push	r22
     bae:	7f 93       	push	r23
     bb0:	8f 93       	push	r24
     bb2:	9f 93       	push	r25
     bb4:	af 93       	push	r26
     bb6:	bf 93       	push	r27
     bb8:	ef 93       	push	r30
     bba:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     bbc:	e0 91 1e 20 	lds	r30, 0x201E
     bc0:	f0 91 1f 20 	lds	r31, 0x201F
     bc4:	30 97       	sbiw	r30, 0x00	; 0
     bc6:	09 f0       	breq	.+2      	; 0xbca <__vector_80+0x34>
		tc_tcd0_ccb_callback();
     bc8:	09 95       	icall
	}
}
     bca:	ff 91       	pop	r31
     bcc:	ef 91       	pop	r30
     bce:	bf 91       	pop	r27
     bd0:	af 91       	pop	r26
     bd2:	9f 91       	pop	r25
     bd4:	8f 91       	pop	r24
     bd6:	7f 91       	pop	r23
     bd8:	6f 91       	pop	r22
     bda:	5f 91       	pop	r21
     bdc:	4f 91       	pop	r20
     bde:	3f 91       	pop	r19
     be0:	2f 91       	pop	r18
     be2:	0f 90       	pop	r0
     be4:	0b be       	out	0x3b, r0	; 59
     be6:	0f 90       	pop	r0
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	0f 90       	pop	r0
     bec:	1f 90       	pop	r1
     bee:	18 95       	reti

00000bf0 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     bf0:	1f 92       	push	r1
     bf2:	0f 92       	push	r0
     bf4:	0f b6       	in	r0, 0x3f	; 63
     bf6:	0f 92       	push	r0
     bf8:	11 24       	eor	r1, r1
     bfa:	0b b6       	in	r0, 0x3b	; 59
     bfc:	0f 92       	push	r0
     bfe:	2f 93       	push	r18
     c00:	3f 93       	push	r19
     c02:	4f 93       	push	r20
     c04:	5f 93       	push	r21
     c06:	6f 93       	push	r22
     c08:	7f 93       	push	r23
     c0a:	8f 93       	push	r24
     c0c:	9f 93       	push	r25
     c0e:	af 93       	push	r26
     c10:	bf 93       	push	r27
     c12:	ef 93       	push	r30
     c14:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     c16:	e0 91 1c 20 	lds	r30, 0x201C
     c1a:	f0 91 1d 20 	lds	r31, 0x201D
     c1e:	30 97       	sbiw	r30, 0x00	; 0
     c20:	09 f0       	breq	.+2      	; 0xc24 <__vector_81+0x34>
		tc_tcd0_ccc_callback();
     c22:	09 95       	icall
	}
}
     c24:	ff 91       	pop	r31
     c26:	ef 91       	pop	r30
     c28:	bf 91       	pop	r27
     c2a:	af 91       	pop	r26
     c2c:	9f 91       	pop	r25
     c2e:	8f 91       	pop	r24
     c30:	7f 91       	pop	r23
     c32:	6f 91       	pop	r22
     c34:	5f 91       	pop	r21
     c36:	4f 91       	pop	r20
     c38:	3f 91       	pop	r19
     c3a:	2f 91       	pop	r18
     c3c:	0f 90       	pop	r0
     c3e:	0b be       	out	0x3b, r0	; 59
     c40:	0f 90       	pop	r0
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	0f 90       	pop	r0
     c46:	1f 90       	pop	r1
     c48:	18 95       	reti

00000c4a <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     c4a:	1f 92       	push	r1
     c4c:	0f 92       	push	r0
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	0f 92       	push	r0
     c52:	11 24       	eor	r1, r1
     c54:	0b b6       	in	r0, 0x3b	; 59
     c56:	0f 92       	push	r0
     c58:	2f 93       	push	r18
     c5a:	3f 93       	push	r19
     c5c:	4f 93       	push	r20
     c5e:	5f 93       	push	r21
     c60:	6f 93       	push	r22
     c62:	7f 93       	push	r23
     c64:	8f 93       	push	r24
     c66:	9f 93       	push	r25
     c68:	af 93       	push	r26
     c6a:	bf 93       	push	r27
     c6c:	ef 93       	push	r30
     c6e:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     c70:	e0 91 1a 20 	lds	r30, 0x201A
     c74:	f0 91 1b 20 	lds	r31, 0x201B
     c78:	30 97       	sbiw	r30, 0x00	; 0
     c7a:	09 f0       	breq	.+2      	; 0xc7e <__vector_82+0x34>
		tc_tcd0_ccd_callback();
     c7c:	09 95       	icall
	}
}
     c7e:	ff 91       	pop	r31
     c80:	ef 91       	pop	r30
     c82:	bf 91       	pop	r27
     c84:	af 91       	pop	r26
     c86:	9f 91       	pop	r25
     c88:	8f 91       	pop	r24
     c8a:	7f 91       	pop	r23
     c8c:	6f 91       	pop	r22
     c8e:	5f 91       	pop	r21
     c90:	4f 91       	pop	r20
     c92:	3f 91       	pop	r19
     c94:	2f 91       	pop	r18
     c96:	0f 90       	pop	r0
     c98:	0b be       	out	0x3b, r0	; 59
     c9a:	0f 90       	pop	r0
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	0f 90       	pop	r0
     ca0:	1f 90       	pop	r1
     ca2:	18 95       	reti

00000ca4 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     ca4:	1f 92       	push	r1
     ca6:	0f 92       	push	r0
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	0f 92       	push	r0
     cac:	11 24       	eor	r1, r1
     cae:	0b b6       	in	r0, 0x3b	; 59
     cb0:	0f 92       	push	r0
     cb2:	2f 93       	push	r18
     cb4:	3f 93       	push	r19
     cb6:	4f 93       	push	r20
     cb8:	5f 93       	push	r21
     cba:	6f 93       	push	r22
     cbc:	7f 93       	push	r23
     cbe:	8f 93       	push	r24
     cc0:	9f 93       	push	r25
     cc2:	af 93       	push	r26
     cc4:	bf 93       	push	r27
     cc6:	ef 93       	push	r30
     cc8:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     cca:	e0 91 18 20 	lds	r30, 0x2018
     cce:	f0 91 19 20 	lds	r31, 0x2019
     cd2:	30 97       	sbiw	r30, 0x00	; 0
     cd4:	09 f0       	breq	.+2      	; 0xcd8 <__vector_84+0x34>
		tc_tcd1_err_callback();
     cd6:	09 95       	icall
	}
}
     cd8:	ff 91       	pop	r31
     cda:	ef 91       	pop	r30
     cdc:	bf 91       	pop	r27
     cde:	af 91       	pop	r26
     ce0:	9f 91       	pop	r25
     ce2:	8f 91       	pop	r24
     ce4:	7f 91       	pop	r23
     ce6:	6f 91       	pop	r22
     ce8:	5f 91       	pop	r21
     cea:	4f 91       	pop	r20
     cec:	3f 91       	pop	r19
     cee:	2f 91       	pop	r18
     cf0:	0f 90       	pop	r0
     cf2:	0b be       	out	0x3b, r0	; 59
     cf4:	0f 90       	pop	r0
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	0f 90       	pop	r0
     cfa:	1f 90       	pop	r1
     cfc:	18 95       	reti

00000cfe <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     cfe:	1f 92       	push	r1
     d00:	0f 92       	push	r0
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	0f 92       	push	r0
     d06:	11 24       	eor	r1, r1
     d08:	0b b6       	in	r0, 0x3b	; 59
     d0a:	0f 92       	push	r0
     d0c:	2f 93       	push	r18
     d0e:	3f 93       	push	r19
     d10:	4f 93       	push	r20
     d12:	5f 93       	push	r21
     d14:	6f 93       	push	r22
     d16:	7f 93       	push	r23
     d18:	8f 93       	push	r24
     d1a:	9f 93       	push	r25
     d1c:	af 93       	push	r26
     d1e:	bf 93       	push	r27
     d20:	ef 93       	push	r30
     d22:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
     d24:	e0 91 16 20 	lds	r30, 0x2016
     d28:	f0 91 17 20 	lds	r31, 0x2017
     d2c:	30 97       	sbiw	r30, 0x00	; 0
     d2e:	09 f0       	breq	.+2      	; 0xd32 <__vector_85+0x34>
		tc_tcd1_cca_callback();
     d30:	09 95       	icall
	}
}
     d32:	ff 91       	pop	r31
     d34:	ef 91       	pop	r30
     d36:	bf 91       	pop	r27
     d38:	af 91       	pop	r26
     d3a:	9f 91       	pop	r25
     d3c:	8f 91       	pop	r24
     d3e:	7f 91       	pop	r23
     d40:	6f 91       	pop	r22
     d42:	5f 91       	pop	r21
     d44:	4f 91       	pop	r20
     d46:	3f 91       	pop	r19
     d48:	2f 91       	pop	r18
     d4a:	0f 90       	pop	r0
     d4c:	0b be       	out	0x3b, r0	; 59
     d4e:	0f 90       	pop	r0
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	0f 90       	pop	r0
     d54:	1f 90       	pop	r1
     d56:	18 95       	reti

00000d58 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
     d58:	1f 92       	push	r1
     d5a:	0f 92       	push	r0
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	0f 92       	push	r0
     d60:	11 24       	eor	r1, r1
     d62:	0b b6       	in	r0, 0x3b	; 59
     d64:	0f 92       	push	r0
     d66:	2f 93       	push	r18
     d68:	3f 93       	push	r19
     d6a:	4f 93       	push	r20
     d6c:	5f 93       	push	r21
     d6e:	6f 93       	push	r22
     d70:	7f 93       	push	r23
     d72:	8f 93       	push	r24
     d74:	9f 93       	push	r25
     d76:	af 93       	push	r26
     d78:	bf 93       	push	r27
     d7a:	ef 93       	push	r30
     d7c:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
     d7e:	e0 91 14 20 	lds	r30, 0x2014
     d82:	f0 91 15 20 	lds	r31, 0x2015
     d86:	30 97       	sbiw	r30, 0x00	; 0
     d88:	09 f0       	breq	.+2      	; 0xd8c <__vector_86+0x34>
		tc_tcd1_ccb_callback();
     d8a:	09 95       	icall
	}
}
     d8c:	ff 91       	pop	r31
     d8e:	ef 91       	pop	r30
     d90:	bf 91       	pop	r27
     d92:	af 91       	pop	r26
     d94:	9f 91       	pop	r25
     d96:	8f 91       	pop	r24
     d98:	7f 91       	pop	r23
     d9a:	6f 91       	pop	r22
     d9c:	5f 91       	pop	r21
     d9e:	4f 91       	pop	r20
     da0:	3f 91       	pop	r19
     da2:	2f 91       	pop	r18
     da4:	0f 90       	pop	r0
     da6:	0b be       	out	0x3b, r0	; 59
     da8:	0f 90       	pop	r0
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	0f 90       	pop	r0
     dae:	1f 90       	pop	r1
     db0:	18 95       	reti

00000db2 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
     db2:	1f 92       	push	r1
     db4:	0f 92       	push	r0
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	0f 92       	push	r0
     dba:	11 24       	eor	r1, r1
     dbc:	0b b6       	in	r0, 0x3b	; 59
     dbe:	0f 92       	push	r0
     dc0:	2f 93       	push	r18
     dc2:	3f 93       	push	r19
     dc4:	4f 93       	push	r20
     dc6:	5f 93       	push	r21
     dc8:	6f 93       	push	r22
     dca:	7f 93       	push	r23
     dcc:	8f 93       	push	r24
     dce:	9f 93       	push	r25
     dd0:	af 93       	push	r26
     dd2:	bf 93       	push	r27
     dd4:	ef 93       	push	r30
     dd6:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
     dd8:	e0 91 12 20 	lds	r30, 0x2012
     ddc:	f0 91 13 20 	lds	r31, 0x2013
     de0:	30 97       	sbiw	r30, 0x00	; 0
     de2:	09 f0       	breq	.+2      	; 0xde6 <__vector_47+0x34>
		tc_tce0_ovf_callback();
     de4:	09 95       	icall
	}
}
     de6:	ff 91       	pop	r31
     de8:	ef 91       	pop	r30
     dea:	bf 91       	pop	r27
     dec:	af 91       	pop	r26
     dee:	9f 91       	pop	r25
     df0:	8f 91       	pop	r24
     df2:	7f 91       	pop	r23
     df4:	6f 91       	pop	r22
     df6:	5f 91       	pop	r21
     df8:	4f 91       	pop	r20
     dfa:	3f 91       	pop	r19
     dfc:	2f 91       	pop	r18
     dfe:	0f 90       	pop	r0
     e00:	0b be       	out	0x3b, r0	; 59
     e02:	0f 90       	pop	r0
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	0f 90       	pop	r0
     e08:	1f 90       	pop	r1
     e0a:	18 95       	reti

00000e0c <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
     e0c:	1f 92       	push	r1
     e0e:	0f 92       	push	r0
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	0f 92       	push	r0
     e14:	11 24       	eor	r1, r1
     e16:	0b b6       	in	r0, 0x3b	; 59
     e18:	0f 92       	push	r0
     e1a:	2f 93       	push	r18
     e1c:	3f 93       	push	r19
     e1e:	4f 93       	push	r20
     e20:	5f 93       	push	r21
     e22:	6f 93       	push	r22
     e24:	7f 93       	push	r23
     e26:	8f 93       	push	r24
     e28:	9f 93       	push	r25
     e2a:	af 93       	push	r26
     e2c:	bf 93       	push	r27
     e2e:	ef 93       	push	r30
     e30:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
     e32:	e0 91 10 20 	lds	r30, 0x2010
     e36:	f0 91 11 20 	lds	r31, 0x2011
     e3a:	30 97       	sbiw	r30, 0x00	; 0
     e3c:	09 f0       	breq	.+2      	; 0xe40 <__vector_48+0x34>
		tc_tce0_err_callback();
     e3e:	09 95       	icall
	}
}
     e40:	ff 91       	pop	r31
     e42:	ef 91       	pop	r30
     e44:	bf 91       	pop	r27
     e46:	af 91       	pop	r26
     e48:	9f 91       	pop	r25
     e4a:	8f 91       	pop	r24
     e4c:	7f 91       	pop	r23
     e4e:	6f 91       	pop	r22
     e50:	5f 91       	pop	r21
     e52:	4f 91       	pop	r20
     e54:	3f 91       	pop	r19
     e56:	2f 91       	pop	r18
     e58:	0f 90       	pop	r0
     e5a:	0b be       	out	0x3b, r0	; 59
     e5c:	0f 90       	pop	r0
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	0f 90       	pop	r0
     e62:	1f 90       	pop	r1
     e64:	18 95       	reti

00000e66 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
     e66:	1f 92       	push	r1
     e68:	0f 92       	push	r0
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	0f 92       	push	r0
     e6e:	11 24       	eor	r1, r1
     e70:	0b b6       	in	r0, 0x3b	; 59
     e72:	0f 92       	push	r0
     e74:	2f 93       	push	r18
     e76:	3f 93       	push	r19
     e78:	4f 93       	push	r20
     e7a:	5f 93       	push	r21
     e7c:	6f 93       	push	r22
     e7e:	7f 93       	push	r23
     e80:	8f 93       	push	r24
     e82:	9f 93       	push	r25
     e84:	af 93       	push	r26
     e86:	bf 93       	push	r27
     e88:	ef 93       	push	r30
     e8a:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
     e8c:	e0 91 0e 20 	lds	r30, 0x200E
     e90:	f0 91 0f 20 	lds	r31, 0x200F
     e94:	30 97       	sbiw	r30, 0x00	; 0
     e96:	09 f0       	breq	.+2      	; 0xe9a <__vector_49+0x34>
		tc_tce0_cca_callback();
     e98:	09 95       	icall
	}
}
     e9a:	ff 91       	pop	r31
     e9c:	ef 91       	pop	r30
     e9e:	bf 91       	pop	r27
     ea0:	af 91       	pop	r26
     ea2:	9f 91       	pop	r25
     ea4:	8f 91       	pop	r24
     ea6:	7f 91       	pop	r23
     ea8:	6f 91       	pop	r22
     eaa:	5f 91       	pop	r21
     eac:	4f 91       	pop	r20
     eae:	3f 91       	pop	r19
     eb0:	2f 91       	pop	r18
     eb2:	0f 90       	pop	r0
     eb4:	0b be       	out	0x3b, r0	; 59
     eb6:	0f 90       	pop	r0
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	0f 90       	pop	r0
     ebc:	1f 90       	pop	r1
     ebe:	18 95       	reti

00000ec0 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
     ec0:	1f 92       	push	r1
     ec2:	0f 92       	push	r0
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	0f 92       	push	r0
     ec8:	11 24       	eor	r1, r1
     eca:	0b b6       	in	r0, 0x3b	; 59
     ecc:	0f 92       	push	r0
     ece:	2f 93       	push	r18
     ed0:	3f 93       	push	r19
     ed2:	4f 93       	push	r20
     ed4:	5f 93       	push	r21
     ed6:	6f 93       	push	r22
     ed8:	7f 93       	push	r23
     eda:	8f 93       	push	r24
     edc:	9f 93       	push	r25
     ede:	af 93       	push	r26
     ee0:	bf 93       	push	r27
     ee2:	ef 93       	push	r30
     ee4:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
     ee6:	e0 91 0c 20 	lds	r30, 0x200C
     eea:	f0 91 0d 20 	lds	r31, 0x200D
     eee:	30 97       	sbiw	r30, 0x00	; 0
     ef0:	09 f0       	breq	.+2      	; 0xef4 <__vector_50+0x34>
		tc_tce0_ccb_callback();
     ef2:	09 95       	icall
	}
}
     ef4:	ff 91       	pop	r31
     ef6:	ef 91       	pop	r30
     ef8:	bf 91       	pop	r27
     efa:	af 91       	pop	r26
     efc:	9f 91       	pop	r25
     efe:	8f 91       	pop	r24
     f00:	7f 91       	pop	r23
     f02:	6f 91       	pop	r22
     f04:	5f 91       	pop	r21
     f06:	4f 91       	pop	r20
     f08:	3f 91       	pop	r19
     f0a:	2f 91       	pop	r18
     f0c:	0f 90       	pop	r0
     f0e:	0b be       	out	0x3b, r0	; 59
     f10:	0f 90       	pop	r0
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	0f 90       	pop	r0
     f16:	1f 90       	pop	r1
     f18:	18 95       	reti

00000f1a <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
     f1a:	1f 92       	push	r1
     f1c:	0f 92       	push	r0
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	0f 92       	push	r0
     f22:	11 24       	eor	r1, r1
     f24:	0b b6       	in	r0, 0x3b	; 59
     f26:	0f 92       	push	r0
     f28:	2f 93       	push	r18
     f2a:	3f 93       	push	r19
     f2c:	4f 93       	push	r20
     f2e:	5f 93       	push	r21
     f30:	6f 93       	push	r22
     f32:	7f 93       	push	r23
     f34:	8f 93       	push	r24
     f36:	9f 93       	push	r25
     f38:	af 93       	push	r26
     f3a:	bf 93       	push	r27
     f3c:	ef 93       	push	r30
     f3e:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
     f40:	e0 91 0a 20 	lds	r30, 0x200A
     f44:	f0 91 0b 20 	lds	r31, 0x200B
     f48:	30 97       	sbiw	r30, 0x00	; 0
     f4a:	09 f0       	breq	.+2      	; 0xf4e <__vector_51+0x34>
		tc_tce0_ccc_callback();
     f4c:	09 95       	icall
	}
}
     f4e:	ff 91       	pop	r31
     f50:	ef 91       	pop	r30
     f52:	bf 91       	pop	r27
     f54:	af 91       	pop	r26
     f56:	9f 91       	pop	r25
     f58:	8f 91       	pop	r24
     f5a:	7f 91       	pop	r23
     f5c:	6f 91       	pop	r22
     f5e:	5f 91       	pop	r21
     f60:	4f 91       	pop	r20
     f62:	3f 91       	pop	r19
     f64:	2f 91       	pop	r18
     f66:	0f 90       	pop	r0
     f68:	0b be       	out	0x3b, r0	; 59
     f6a:	0f 90       	pop	r0
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	0f 90       	pop	r0
     f70:	1f 90       	pop	r1
     f72:	18 95       	reti

00000f74 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
     f74:	1f 92       	push	r1
     f76:	0f 92       	push	r0
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	0f 92       	push	r0
     f7c:	11 24       	eor	r1, r1
     f7e:	0b b6       	in	r0, 0x3b	; 59
     f80:	0f 92       	push	r0
     f82:	2f 93       	push	r18
     f84:	3f 93       	push	r19
     f86:	4f 93       	push	r20
     f88:	5f 93       	push	r21
     f8a:	6f 93       	push	r22
     f8c:	7f 93       	push	r23
     f8e:	8f 93       	push	r24
     f90:	9f 93       	push	r25
     f92:	af 93       	push	r26
     f94:	bf 93       	push	r27
     f96:	ef 93       	push	r30
     f98:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
     f9a:	e0 91 08 20 	lds	r30, 0x2008
     f9e:	f0 91 09 20 	lds	r31, 0x2009
     fa2:	30 97       	sbiw	r30, 0x00	; 0
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <__vector_52+0x34>
		tc_tce0_ccd_callback();
     fa6:	09 95       	icall
	}
}
     fa8:	ff 91       	pop	r31
     faa:	ef 91       	pop	r30
     fac:	bf 91       	pop	r27
     fae:	af 91       	pop	r26
     fb0:	9f 91       	pop	r25
     fb2:	8f 91       	pop	r24
     fb4:	7f 91       	pop	r23
     fb6:	6f 91       	pop	r22
     fb8:	5f 91       	pop	r21
     fba:	4f 91       	pop	r20
     fbc:	3f 91       	pop	r19
     fbe:	2f 91       	pop	r18
     fc0:	0f 90       	pop	r0
     fc2:	0b be       	out	0x3b, r0	; 59
     fc4:	0f 90       	pop	r0
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	0f 90       	pop	r0
     fca:	1f 90       	pop	r1
     fcc:	18 95       	reti

00000fce <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
     fce:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     fd0:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
     fd2:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
     fd4:	28 2f       	mov	r18, r24
     fd6:	39 2f       	mov	r19, r25
     fd8:	21 15       	cp	r18, r1
     fda:	88 e0       	ldi	r24, 0x08	; 8
     fdc:	38 07       	cpc	r19, r24
     fde:	39 f4       	brne	.+14     	; 0xfee <tc_enable+0x20>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     fe0:	61 e0       	ldi	r22, 0x01	; 1
     fe2:	83 e0       	ldi	r24, 0x03	; 3
     fe4:	8b d2       	rcall	.+1302   	; 0x14fc <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     fe6:	64 e0       	ldi	r22, 0x04	; 4
     fe8:	83 e0       	ldi	r24, 0x03	; 3
     fea:	88 d2       	rcall	.+1296   	; 0x14fc <sysclk_enable_module>
     fec:	2d c0       	rjmp	.+90     	; 0x1048 <tc_enable+0x7a>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
     fee:	20 34       	cpi	r18, 0x40	; 64
     ff0:	88 e0       	ldi	r24, 0x08	; 8
     ff2:	38 07       	cpc	r19, r24
     ff4:	39 f4       	brne	.+14     	; 0x1004 <tc_enable+0x36>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     ff6:	62 e0       	ldi	r22, 0x02	; 2
     ff8:	83 e0       	ldi	r24, 0x03	; 3
     ffa:	80 d2       	rcall	.+1280   	; 0x14fc <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     ffc:	64 e0       	ldi	r22, 0x04	; 4
     ffe:	83 e0       	ldi	r24, 0x03	; 3
    1000:	7d d2       	rcall	.+1274   	; 0x14fc <sysclk_enable_module>
    1002:	22 c0       	rjmp	.+68     	; 0x1048 <tc_enable+0x7a>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    1004:	21 15       	cp	r18, r1
    1006:	89 e0       	ldi	r24, 0x09	; 9
    1008:	38 07       	cpc	r19, r24
    100a:	39 f4       	brne	.+14     	; 0x101a <tc_enable+0x4c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    100c:	61 e0       	ldi	r22, 0x01	; 1
    100e:	84 e0       	ldi	r24, 0x04	; 4
    1010:	75 d2       	rcall	.+1258   	; 0x14fc <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1012:	64 e0       	ldi	r22, 0x04	; 4
    1014:	84 e0       	ldi	r24, 0x04	; 4
    1016:	72 d2       	rcall	.+1252   	; 0x14fc <sysclk_enable_module>
    1018:	17 c0       	rjmp	.+46     	; 0x1048 <tc_enable+0x7a>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    101a:	20 34       	cpi	r18, 0x40	; 64
    101c:	89 e0       	ldi	r24, 0x09	; 9
    101e:	38 07       	cpc	r19, r24
    1020:	39 f4       	brne	.+14     	; 0x1030 <tc_enable+0x62>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1022:	62 e0       	ldi	r22, 0x02	; 2
    1024:	84 e0       	ldi	r24, 0x04	; 4
    1026:	6a d2       	rcall	.+1236   	; 0x14fc <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1028:	64 e0       	ldi	r22, 0x04	; 4
    102a:	84 e0       	ldi	r24, 0x04	; 4
    102c:	67 d2       	rcall	.+1230   	; 0x14fc <sysclk_enable_module>
    102e:	0c c0       	rjmp	.+24     	; 0x1048 <tc_enable+0x7a>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1030:	21 15       	cp	r18, r1
    1032:	3a 40       	sbci	r19, 0x0A	; 10
    1034:	39 f4       	brne	.+14     	; 0x1044 <tc_enable+0x76>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1036:	61 e0       	ldi	r22, 0x01	; 1
    1038:	85 e0       	ldi	r24, 0x05	; 5
    103a:	60 d2       	rcall	.+1216   	; 0x14fc <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    103c:	64 e0       	ldi	r22, 0x04	; 4
    103e:	85 e0       	ldi	r24, 0x05	; 5
    1040:	5d d2       	rcall	.+1210   	; 0x14fc <sysclk_enable_module>
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <tc_enable+0x7a>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1044:	cf bf       	out	0x3f, r28	; 63
    1046:	09 c0       	rjmp	.+18     	; 0x105a <tc_enable+0x8c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1048:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    104a:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    104c:	ee e3       	ldi	r30, 0x3E	; 62
    104e:	f0 e2       	ldi	r31, 0x20	; 32
    1050:	90 81       	ld	r25, Z
    1052:	9f 5f       	subi	r25, 0xFF	; 255
    1054:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1056:	8f bf       	out	0x3f, r24	; 63
    1058:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    105a:	cf 91       	pop	r28
    105c:	08 95       	ret

0000105e <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    105e:	fc 01       	movw	r30, r24
    1060:	81 81       	ldd	r24, Z+1	; 0x01
    1062:	85 ff       	sbrs	r24, 5
    1064:	fd cf       	rjmp	.-6      	; 0x1060 <usart_putchar+0x2>
    1066:	60 83       	st	Z, r22
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	08 95       	ret

0000106e <usart_getchar>:
    106e:	fc 01       	movw	r30, r24
    1070:	81 81       	ldd	r24, Z+1	; 0x01
    1072:	88 23       	and	r24, r24
    1074:	ec f7       	brge	.-6      	; 0x1070 <usart_getchar+0x2>
    1076:	80 81       	ld	r24, Z
    1078:	08 95       	ret

0000107a <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    107a:	4f 92       	push	r4
    107c:	5f 92       	push	r5
    107e:	6f 92       	push	r6
    1080:	7f 92       	push	r7
    1082:	8f 92       	push	r8
    1084:	9f 92       	push	r9
    1086:	af 92       	push	r10
    1088:	bf 92       	push	r11
    108a:	cf 92       	push	r12
    108c:	df 92       	push	r13
    108e:	ef 92       	push	r14
    1090:	ff 92       	push	r15
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	ec 01       	movw	r28, r24
    109c:	4a 01       	movw	r8, r20
    109e:	5b 01       	movw	r10, r22
    10a0:	28 01       	movw	r4, r16
    10a2:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    10a4:	d9 01       	movw	r26, r18
    10a6:	c8 01       	movw	r24, r16
    10a8:	68 94       	set
    10aa:	12 f8       	bld	r1, 2
    10ac:	b6 95       	lsr	r27
    10ae:	a7 95       	ror	r26
    10b0:	97 95       	ror	r25
    10b2:	87 95       	ror	r24
    10b4:	16 94       	lsr	r1
    10b6:	d1 f7       	brne	.-12     	; 0x10ac <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    10b8:	b9 01       	movw	r22, r18
    10ba:	a8 01       	movw	r20, r16
    10bc:	03 2e       	mov	r0, r19
    10be:	36 e1       	ldi	r19, 0x16	; 22
    10c0:	76 95       	lsr	r23
    10c2:	67 95       	ror	r22
    10c4:	57 95       	ror	r21
    10c6:	47 95       	ror	r20
    10c8:	3a 95       	dec	r19
    10ca:	d1 f7       	brne	.-12     	; 0x10c0 <usart_set_baudrate+0x46>
    10cc:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    10ce:	2c 81       	ldd	r18, Y+4	; 0x04
    10d0:	22 fd       	sbrc	r18, 2
    10d2:	08 c0       	rjmp	.+16     	; 0x10e4 <usart_set_baudrate+0x6a>
		max_rate /= 2;
    10d4:	b6 95       	lsr	r27
    10d6:	a7 95       	ror	r26
    10d8:	97 95       	ror	r25
    10da:	87 95       	ror	r24
		min_rate /= 2;
    10dc:	76 95       	lsr	r23
    10de:	67 95       	ror	r22
    10e0:	57 95       	ror	r21
    10e2:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    10e4:	88 15       	cp	r24, r8
    10e6:	99 05       	cpc	r25, r9
    10e8:	aa 05       	cpc	r26, r10
    10ea:	bb 05       	cpc	r27, r11
    10ec:	08 f4       	brcc	.+2      	; 0x10f0 <usart_set_baudrate+0x76>
    10ee:	a2 c0       	rjmp	.+324    	; 0x1234 <usart_set_baudrate+0x1ba>
    10f0:	84 16       	cp	r8, r20
    10f2:	95 06       	cpc	r9, r21
    10f4:	a6 06       	cpc	r10, r22
    10f6:	b7 06       	cpc	r11, r23
    10f8:	08 f4       	brcc	.+2      	; 0x10fc <usart_set_baudrate+0x82>
    10fa:	9e c0       	rjmp	.+316    	; 0x1238 <usart_set_baudrate+0x1be>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    10fc:	8c 81       	ldd	r24, Y+4	; 0x04
    10fe:	82 fd       	sbrc	r24, 2
    1100:	04 c0       	rjmp	.+8      	; 0x110a <usart_set_baudrate+0x90>
		baud *= 2;
    1102:	88 0c       	add	r8, r8
    1104:	99 1c       	adc	r9, r9
    1106:	aa 1c       	adc	r10, r10
    1108:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    110a:	c3 01       	movw	r24, r6
    110c:	b2 01       	movw	r22, r4
    110e:	a5 01       	movw	r20, r10
    1110:	94 01       	movw	r18, r8
    1112:	42 d6       	rcall	.+3204   	; 0x1d98 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    1114:	2f 3f       	cpi	r18, 0xFF	; 255
    1116:	31 05       	cpc	r19, r1
    1118:	41 05       	cpc	r20, r1
    111a:	51 05       	cpc	r21, r1
    111c:	08 f4       	brcc	.+2      	; 0x1120 <usart_set_baudrate+0xa6>
    111e:	8e c0       	rjmp	.+284    	; 0x123c <usart_set_baudrate+0x1c2>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    1120:	c1 2c       	mov	r12, r1
    1122:	d1 2c       	mov	r13, r1
    1124:	76 01       	movw	r14, r12
    1126:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1128:	19 ef       	ldi	r17, 0xF9	; 249
    112a:	05 c0       	rjmp	.+10     	; 0x1136 <usart_set_baudrate+0xbc>
		if (ratio < limit) {
    112c:	2c 15       	cp	r18, r12
    112e:	3d 05       	cpc	r19, r13
    1130:	4e 05       	cpc	r20, r14
    1132:	5f 05       	cpc	r21, r15
    1134:	68 f0       	brcs	.+26     	; 0x1150 <usart_set_baudrate+0xd6>
			break;
		}

		limit <<= 1;
    1136:	cc 0c       	add	r12, r12
    1138:	dd 1c       	adc	r13, r13
    113a:	ee 1c       	adc	r14, r14
    113c:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    113e:	1d 3f       	cpi	r17, 0xFD	; 253
    1140:	14 f4       	brge	.+4      	; 0x1146 <usart_set_baudrate+0xcc>
			limit |= 1;
    1142:	68 94       	set
    1144:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1146:	1f 5f       	subi	r17, 0xFF	; 255
    1148:	17 30       	cpi	r17, 0x07	; 7
    114a:	81 f7       	brne	.-32     	; 0x112c <usart_set_baudrate+0xb2>
    114c:	21 2f       	mov	r18, r17
    114e:	4e c0       	rjmp	.+156    	; 0x11ec <usart_set_baudrate+0x172>
    1150:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1152:	11 23       	and	r17, r17
    1154:	0c f0       	brlt	.+2      	; 0x1158 <usart_set_baudrate+0xde>
    1156:	4a c0       	rjmp	.+148    	; 0x11ec <usart_set_baudrate+0x172>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1158:	d5 01       	movw	r26, r10
    115a:	c4 01       	movw	r24, r8
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	aa 1f       	adc	r26, r26
    1162:	bb 1f       	adc	r27, r27
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	aa 1f       	adc	r26, r26
    116a:	bb 1f       	adc	r27, r27
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	aa 1f       	adc	r26, r26
    1172:	bb 1f       	adc	r27, r27
    1174:	48 1a       	sub	r4, r24
    1176:	59 0a       	sbc	r5, r25
    1178:	6a 0a       	sbc	r6, r26
    117a:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    117c:	1e 3f       	cpi	r17, 0xFE	; 254
    117e:	ec f4       	brge	.+58     	; 0x11ba <usart_set_baudrate+0x140>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1180:	6d ef       	ldi	r22, 0xFD	; 253
    1182:	7f ef       	ldi	r23, 0xFF	; 255
    1184:	61 1b       	sub	r22, r17
    1186:	71 09       	sbc	r23, r1
    1188:	17 fd       	sbrc	r17, 7
    118a:	73 95       	inc	r23
    118c:	04 c0       	rjmp	.+8      	; 0x1196 <usart_set_baudrate+0x11c>
    118e:	44 0c       	add	r4, r4
    1190:	55 1c       	adc	r5, r5
    1192:	66 1c       	adc	r6, r6
    1194:	77 1c       	adc	r7, r7
    1196:	6a 95       	dec	r22
    1198:	d2 f7       	brpl	.-12     	; 0x118e <usart_set_baudrate+0x114>
    119a:	d5 01       	movw	r26, r10
    119c:	c4 01       	movw	r24, r8
    119e:	b6 95       	lsr	r27
    11a0:	a7 95       	ror	r26
    11a2:	97 95       	ror	r25
    11a4:	87 95       	ror	r24
    11a6:	bc 01       	movw	r22, r24
    11a8:	cd 01       	movw	r24, r26
    11aa:	64 0d       	add	r22, r4
    11ac:	75 1d       	adc	r23, r5
    11ae:	86 1d       	adc	r24, r6
    11b0:	97 1d       	adc	r25, r7
    11b2:	a5 01       	movw	r20, r10
    11b4:	94 01       	movw	r18, r8
    11b6:	f0 d5       	rcall	.+3040   	; 0x1d98 <__udivmodsi4>
    11b8:	34 c0       	rjmp	.+104    	; 0x1222 <usart_set_baudrate+0x1a8>
		} else {
			baud <<= exp + 3;
    11ba:	23 e0       	ldi	r18, 0x03	; 3
    11bc:	21 0f       	add	r18, r17
    11be:	d5 01       	movw	r26, r10
    11c0:	c4 01       	movw	r24, r8
    11c2:	04 c0       	rjmp	.+8      	; 0x11cc <usart_set_baudrate+0x152>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	aa 1f       	adc	r26, r26
    11ca:	bb 1f       	adc	r27, r27
    11cc:	2a 95       	dec	r18
    11ce:	d2 f7       	brpl	.-12     	; 0x11c4 <usart_set_baudrate+0x14a>
    11d0:	9c 01       	movw	r18, r24
    11d2:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    11d4:	b6 95       	lsr	r27
    11d6:	a7 95       	ror	r26
    11d8:	97 95       	ror	r25
    11da:	87 95       	ror	r24
    11dc:	bc 01       	movw	r22, r24
    11de:	cd 01       	movw	r24, r26
    11e0:	64 0d       	add	r22, r4
    11e2:	75 1d       	adc	r23, r5
    11e4:	86 1d       	adc	r24, r6
    11e6:	97 1d       	adc	r25, r7
    11e8:	d7 d5       	rcall	.+2990   	; 0x1d98 <__udivmodsi4>
    11ea:	1b c0       	rjmp	.+54     	; 0x1222 <usart_set_baudrate+0x1a8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    11ec:	2d 5f       	subi	r18, 0xFD	; 253
    11ee:	d5 01       	movw	r26, r10
    11f0:	c4 01       	movw	r24, r8
    11f2:	04 c0       	rjmp	.+8      	; 0x11fc <usart_set_baudrate+0x182>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	aa 1f       	adc	r26, r26
    11fa:	bb 1f       	adc	r27, r27
    11fc:	2a 95       	dec	r18
    11fe:	d2 f7       	brpl	.-12     	; 0x11f4 <usart_set_baudrate+0x17a>
    1200:	9c 01       	movw	r18, r24
    1202:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    1204:	b6 95       	lsr	r27
    1206:	a7 95       	ror	r26
    1208:	97 95       	ror	r25
    120a:	87 95       	ror	r24
    120c:	bc 01       	movw	r22, r24
    120e:	cd 01       	movw	r24, r26
    1210:	64 0d       	add	r22, r4
    1212:	75 1d       	adc	r23, r5
    1214:	86 1d       	adc	r24, r6
    1216:	97 1d       	adc	r25, r7
    1218:	bf d5       	rcall	.+2942   	; 0x1d98 <__udivmodsi4>
    121a:	21 50       	subi	r18, 0x01	; 1
    121c:	31 09       	sbc	r19, r1
    121e:	41 09       	sbc	r20, r1
    1220:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1222:	83 2f       	mov	r24, r19
    1224:	8f 70       	andi	r24, 0x0F	; 15
    1226:	12 95       	swap	r17
    1228:	10 7f       	andi	r17, 0xF0	; 240
    122a:	18 2b       	or	r17, r24
    122c:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    122e:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	18 c0       	rjmp	.+48     	; 0x1264 <usart_set_baudrate+0x1ea>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	16 c0       	rjmp	.+44     	; 0x1264 <usart_set_baudrate+0x1ea>
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	14 c0       	rjmp	.+40     	; 0x1264 <usart_set_baudrate+0x1ea>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    123c:	d5 01       	movw	r26, r10
    123e:	c4 01       	movw	r24, r8
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	aa 1f       	adc	r26, r26
    1246:	bb 1f       	adc	r27, r27
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	aa 1f       	adc	r26, r26
    124e:	bb 1f       	adc	r27, r27
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	aa 1f       	adc	r26, r26
    1256:	bb 1f       	adc	r27, r27
    1258:	48 1a       	sub	r4, r24
    125a:	59 0a       	sbc	r5, r25
    125c:	6a 0a       	sbc	r6, r26
    125e:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1260:	19 ef       	ldi	r17, 0xF9	; 249
    1262:	8e cf       	rjmp	.-228    	; 0x1180 <usart_set_baudrate+0x106>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	1f 91       	pop	r17
    126a:	0f 91       	pop	r16
    126c:	ff 90       	pop	r15
    126e:	ef 90       	pop	r14
    1270:	df 90       	pop	r13
    1272:	cf 90       	pop	r12
    1274:	bf 90       	pop	r11
    1276:	af 90       	pop	r10
    1278:	9f 90       	pop	r9
    127a:	8f 90       	pop	r8
    127c:	7f 90       	pop	r7
    127e:	6f 90       	pop	r6
    1280:	5f 90       	pop	r5
    1282:	4f 90       	pop	r4
    1284:	08 95       	ret

00001286 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	ec 01       	movw	r28, r24
    1290:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	09 f4       	brne	.+2      	; 0x1298 <usart_init_rs232+0x12>
    1296:	be c0       	rjmp	.+380    	; 0x1414 <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1298:	80 3c       	cpi	r24, 0xC0	; 192
    129a:	91 05       	cpc	r25, r1
    129c:	21 f4       	brne	.+8      	; 0x12a6 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    129e:	60 e1       	ldi	r22, 0x10	; 16
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	2c d1       	rcall	.+600    	; 0x14fc <sysclk_enable_module>
    12a4:	b7 c0       	rjmp	.+366    	; 0x1414 <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    12a6:	c1 15       	cp	r28, r1
    12a8:	84 e0       	ldi	r24, 0x04	; 4
    12aa:	d8 07       	cpc	r29, r24
    12ac:	21 f4       	brne	.+8      	; 0x12b6 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    12ae:	64 e0       	ldi	r22, 0x04	; 4
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	24 d1       	rcall	.+584    	; 0x14fc <sysclk_enable_module>
    12b4:	af c0       	rjmp	.+350    	; 0x1414 <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    12b6:	c0 38       	cpi	r28, 0x80	; 128
    12b8:	e1 e0       	ldi	r30, 0x01	; 1
    12ba:	de 07       	cpc	r29, r30
    12bc:	21 f4       	brne	.+8      	; 0x12c6 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    12be:	62 e0       	ldi	r22, 0x02	; 2
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	1c d1       	rcall	.+568    	; 0x14fc <sysclk_enable_module>
    12c4:	a7 c0       	rjmp	.+334    	; 0x1414 <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    12c6:	c1 15       	cp	r28, r1
    12c8:	f1 e0       	ldi	r31, 0x01	; 1
    12ca:	df 07       	cpc	r29, r31
    12cc:	21 f4       	brne	.+8      	; 0x12d6 <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    12ce:	61 e0       	ldi	r22, 0x01	; 1
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	14 d1       	rcall	.+552    	; 0x14fc <sysclk_enable_module>
    12d4:	9f c0       	rjmp	.+318    	; 0x1414 <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    12d6:	c0 38       	cpi	r28, 0x80	; 128
    12d8:	83 e0       	ldi	r24, 0x03	; 3
    12da:	d8 07       	cpc	r29, r24
    12dc:	21 f4       	brne	.+8      	; 0x12e6 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    12de:	61 e0       	ldi	r22, 0x01	; 1
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	0c d1       	rcall	.+536    	; 0x14fc <sysclk_enable_module>
    12e4:	97 c0       	rjmp	.+302    	; 0x1414 <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    12e6:	c1 15       	cp	r28, r1
    12e8:	e2 e0       	ldi	r30, 0x02	; 2
    12ea:	de 07       	cpc	r29, r30
    12ec:	21 f4       	brne	.+8      	; 0x12f6 <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    12ee:	62 e0       	ldi	r22, 0x02	; 2
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	04 d1       	rcall	.+520    	; 0x14fc <sysclk_enable_module>
    12f4:	8f c0       	rjmp	.+286    	; 0x1414 <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    12f6:	c0 32       	cpi	r28, 0x20	; 32
    12f8:	f3 e0       	ldi	r31, 0x03	; 3
    12fa:	df 07       	cpc	r29, r31
    12fc:	21 f4       	brne	.+8      	; 0x1306 <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    12fe:	64 e0       	ldi	r22, 0x04	; 4
    1300:	82 e0       	ldi	r24, 0x02	; 2
    1302:	fc d0       	rcall	.+504    	; 0x14fc <sysclk_enable_module>
    1304:	87 c0       	rjmp	.+270    	; 0x1414 <usart_init_rs232+0x18e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1306:	c1 15       	cp	r28, r1
    1308:	88 e0       	ldi	r24, 0x08	; 8
    130a:	d8 07       	cpc	r29, r24
    130c:	21 f4       	brne	.+8      	; 0x1316 <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    130e:	61 e0       	ldi	r22, 0x01	; 1
    1310:	83 e0       	ldi	r24, 0x03	; 3
    1312:	f4 d0       	rcall	.+488    	; 0x14fc <sysclk_enable_module>
    1314:	7f c0       	rjmp	.+254    	; 0x1414 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1316:	c1 15       	cp	r28, r1
    1318:	e9 e0       	ldi	r30, 0x09	; 9
    131a:	de 07       	cpc	r29, r30
    131c:	21 f4       	brne	.+8      	; 0x1326 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    131e:	61 e0       	ldi	r22, 0x01	; 1
    1320:	84 e0       	ldi	r24, 0x04	; 4
    1322:	ec d0       	rcall	.+472    	; 0x14fc <sysclk_enable_module>
    1324:	77 c0       	rjmp	.+238    	; 0x1414 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1326:	c1 15       	cp	r28, r1
    1328:	fa e0       	ldi	r31, 0x0A	; 10
    132a:	df 07       	cpc	r29, r31
    132c:	21 f4       	brne	.+8      	; 0x1336 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    132e:	61 e0       	ldi	r22, 0x01	; 1
    1330:	85 e0       	ldi	r24, 0x05	; 5
    1332:	e4 d0       	rcall	.+456    	; 0x14fc <sysclk_enable_module>
    1334:	6f c0       	rjmp	.+222    	; 0x1414 <usart_init_rs232+0x18e>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1336:	c0 34       	cpi	r28, 0x40	; 64
    1338:	88 e0       	ldi	r24, 0x08	; 8
    133a:	d8 07       	cpc	r29, r24
    133c:	21 f4       	brne	.+8      	; 0x1346 <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    133e:	62 e0       	ldi	r22, 0x02	; 2
    1340:	83 e0       	ldi	r24, 0x03	; 3
    1342:	dc d0       	rcall	.+440    	; 0x14fc <sysclk_enable_module>
    1344:	67 c0       	rjmp	.+206    	; 0x1414 <usart_init_rs232+0x18e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1346:	c0 34       	cpi	r28, 0x40	; 64
    1348:	e9 e0       	ldi	r30, 0x09	; 9
    134a:	de 07       	cpc	r29, r30
    134c:	21 f4       	brne	.+8      	; 0x1356 <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    134e:	62 e0       	ldi	r22, 0x02	; 2
    1350:	84 e0       	ldi	r24, 0x04	; 4
    1352:	d4 d0       	rcall	.+424    	; 0x14fc <sysclk_enable_module>
    1354:	5f c0       	rjmp	.+190    	; 0x1414 <usart_init_rs232+0x18e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1356:	c0 39       	cpi	r28, 0x90	; 144
    1358:	f8 e0       	ldi	r31, 0x08	; 8
    135a:	df 07       	cpc	r29, r31
    135c:	21 f4       	brne	.+8      	; 0x1366 <usart_init_rs232+0xe0>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    135e:	64 e0       	ldi	r22, 0x04	; 4
    1360:	83 e0       	ldi	r24, 0x03	; 3
    1362:	cc d0       	rcall	.+408    	; 0x14fc <sysclk_enable_module>
    1364:	57 c0       	rjmp	.+174    	; 0x1414 <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1366:	c0 39       	cpi	r28, 0x90	; 144
    1368:	89 e0       	ldi	r24, 0x09	; 9
    136a:	d8 07       	cpc	r29, r24
    136c:	21 f4       	brne	.+8      	; 0x1376 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    136e:	64 e0       	ldi	r22, 0x04	; 4
    1370:	84 e0       	ldi	r24, 0x04	; 4
    1372:	c4 d0       	rcall	.+392    	; 0x14fc <sysclk_enable_module>
    1374:	4f c0       	rjmp	.+158    	; 0x1414 <usart_init_rs232+0x18e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1376:	c0 39       	cpi	r28, 0x90	; 144
    1378:	ea e0       	ldi	r30, 0x0A	; 10
    137a:	de 07       	cpc	r29, r30
    137c:	21 f4       	brne	.+8      	; 0x1386 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    137e:	64 e0       	ldi	r22, 0x04	; 4
    1380:	85 e0       	ldi	r24, 0x05	; 5
    1382:	bc d0       	rcall	.+376    	; 0x14fc <sysclk_enable_module>
    1384:	47 c0       	rjmp	.+142    	; 0x1414 <usart_init_rs232+0x18e>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1386:	c0 3c       	cpi	r28, 0xC0	; 192
    1388:	f8 e0       	ldi	r31, 0x08	; 8
    138a:	df 07       	cpc	r29, r31
    138c:	21 f4       	brne	.+8      	; 0x1396 <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    138e:	68 e0       	ldi	r22, 0x08	; 8
    1390:	83 e0       	ldi	r24, 0x03	; 3
    1392:	b4 d0       	rcall	.+360    	; 0x14fc <sysclk_enable_module>
    1394:	3f c0       	rjmp	.+126    	; 0x1414 <usart_init_rs232+0x18e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1396:	c0 3c       	cpi	r28, 0xC0	; 192
    1398:	89 e0       	ldi	r24, 0x09	; 9
    139a:	d8 07       	cpc	r29, r24
    139c:	21 f4       	brne	.+8      	; 0x13a6 <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    139e:	68 e0       	ldi	r22, 0x08	; 8
    13a0:	84 e0       	ldi	r24, 0x04	; 4
    13a2:	ac d0       	rcall	.+344    	; 0x14fc <sysclk_enable_module>
    13a4:	37 c0       	rjmp	.+110    	; 0x1414 <usart_init_rs232+0x18e>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    13a6:	c0 3a       	cpi	r28, 0xA0	; 160
    13a8:	e8 e0       	ldi	r30, 0x08	; 8
    13aa:	de 07       	cpc	r29, r30
    13ac:	21 f4       	brne	.+8      	; 0x13b6 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    13ae:	60 e1       	ldi	r22, 0x10	; 16
    13b0:	83 e0       	ldi	r24, 0x03	; 3
    13b2:	a4 d0       	rcall	.+328    	; 0x14fc <sysclk_enable_module>
    13b4:	2f c0       	rjmp	.+94     	; 0x1414 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    13b6:	c0 3a       	cpi	r28, 0xA0	; 160
    13b8:	f9 e0       	ldi	r31, 0x09	; 9
    13ba:	df 07       	cpc	r29, r31
    13bc:	21 f4       	brne	.+8      	; 0x13c6 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    13be:	60 e1       	ldi	r22, 0x10	; 16
    13c0:	84 e0       	ldi	r24, 0x04	; 4
    13c2:	9c d0       	rcall	.+312    	; 0x14fc <sysclk_enable_module>
    13c4:	27 c0       	rjmp	.+78     	; 0x1414 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    13c6:	c0 3a       	cpi	r28, 0xA0	; 160
    13c8:	8a e0       	ldi	r24, 0x0A	; 10
    13ca:	d8 07       	cpc	r29, r24
    13cc:	21 f4       	brne	.+8      	; 0x13d6 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    13ce:	60 e1       	ldi	r22, 0x10	; 16
    13d0:	85 e0       	ldi	r24, 0x05	; 5
    13d2:	94 d0       	rcall	.+296    	; 0x14fc <sysclk_enable_module>
    13d4:	1f c0       	rjmp	.+62     	; 0x1414 <usart_init_rs232+0x18e>
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    13d6:	c0 3b       	cpi	r28, 0xB0	; 176
    13d8:	e8 e0       	ldi	r30, 0x08	; 8
    13da:	de 07       	cpc	r29, r30
    13dc:	21 f4       	brne	.+8      	; 0x13e6 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    13de:	60 e2       	ldi	r22, 0x20	; 32
    13e0:	83 e0       	ldi	r24, 0x03	; 3
    13e2:	8c d0       	rcall	.+280    	; 0x14fc <sysclk_enable_module>
    13e4:	17 c0       	rjmp	.+46     	; 0x1414 <usart_init_rs232+0x18e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    13e6:	c0 3b       	cpi	r28, 0xB0	; 176
    13e8:	f9 e0       	ldi	r31, 0x09	; 9
    13ea:	df 07       	cpc	r29, r31
    13ec:	21 f4       	brne	.+8      	; 0x13f6 <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    13ee:	60 e2       	ldi	r22, 0x20	; 32
    13f0:	84 e0       	ldi	r24, 0x04	; 4
    13f2:	84 d0       	rcall	.+264    	; 0x14fc <sysclk_enable_module>
    13f4:	0f c0       	rjmp	.+30     	; 0x1414 <usart_init_rs232+0x18e>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    13f6:	c0 38       	cpi	r28, 0x80	; 128
    13f8:	84 e0       	ldi	r24, 0x04	; 4
    13fa:	d8 07       	cpc	r29, r24
    13fc:	21 f4       	brne	.+8      	; 0x1406 <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    13fe:	60 e4       	ldi	r22, 0x40	; 64
    1400:	83 e0       	ldi	r24, 0x03	; 3
    1402:	7c d0       	rcall	.+248    	; 0x14fc <sysclk_enable_module>
    1404:	07 c0       	rjmp	.+14     	; 0x1414 <usart_init_rs232+0x18e>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1406:	c0 3a       	cpi	r28, 0xA0	; 160
    1408:	e4 e0       	ldi	r30, 0x04	; 4
    140a:	de 07       	cpc	r29, r30
    140c:	19 f4       	brne	.+6      	; 0x1414 <usart_init_rs232+0x18e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    140e:	60 e4       	ldi	r22, 0x40	; 64
    1410:	85 e0       	ldi	r24, 0x05	; 5
    1412:	74 d0       	rcall	.+232    	; 0x14fc <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1414:	8d 81       	ldd	r24, Y+5	; 0x05
    1416:	8f 73       	andi	r24, 0x3F	; 63
    1418:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    141a:	f8 01       	movw	r30, r16
    141c:	94 81       	ldd	r25, Z+4	; 0x04
    141e:	85 81       	ldd	r24, Z+5	; 0x05
    1420:	89 2b       	or	r24, r25
    1422:	96 81       	ldd	r25, Z+6	; 0x06
    1424:	99 23       	and	r25, r25
    1426:	11 f0       	breq	.+4      	; 0x142c <usart_init_rs232+0x1a6>
    1428:	98 e0       	ldi	r25, 0x08	; 8
    142a:	01 c0       	rjmp	.+2      	; 0x142e <usart_init_rs232+0x1a8>
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	89 2b       	or	r24, r25
    1430:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1432:	f8 01       	movw	r30, r16
    1434:	40 81       	ld	r20, Z
    1436:	51 81       	ldd	r21, Z+1	; 0x01
    1438:	62 81       	ldd	r22, Z+2	; 0x02
    143a:	73 81       	ldd	r23, Z+3	; 0x03
    143c:	00 e0       	ldi	r16, 0x00	; 0
    143e:	18 e4       	ldi	r17, 0x48	; 72
    1440:	28 ee       	ldi	r18, 0xE8	; 232
    1442:	31 e0       	ldi	r19, 0x01	; 1
    1444:	ce 01       	movw	r24, r28
    1446:	19 de       	rcall	.-974    	; 0x107a <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	98 60       	ori	r25, 0x08	; 8
    144c:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    144e:	9c 81       	ldd	r25, Y+4	; 0x04
    1450:	90 61       	ori	r25, 0x10	; 16
    1452:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	1f 91       	pop	r17
    145a:	0f 91       	pop	r16
    145c:	08 95       	ret

0000145e <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	fc 01       	movw	r30, r24
    1464:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    146a:	c6 2f       	mov	r28, r22
    146c:	d0 e0       	ldi	r29, 0x00	; 0
    146e:	de 01       	movw	r26, r28
    1470:	02 2e       	mov	r0, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <ioport_configure_port_pin+0x1a>
    1474:	b5 95       	asr	r27
    1476:	a7 95       	ror	r26
    1478:	0a 94       	dec	r0
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <ioport_configure_port_pin+0x16>
    147c:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    147e:	50 83       	st	Z, r21
    1480:	2f 5f       	subi	r18, 0xFF	; 255
    1482:	3f 4f       	sbci	r19, 0xFF	; 255
    1484:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    1486:	28 30       	cpi	r18, 0x08	; 8
    1488:	31 05       	cpc	r19, r1
    148a:	89 f7       	brne	.-30     	; 0x146e <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    148c:	40 ff       	sbrs	r20, 0
    148e:	0a c0       	rjmp	.+20     	; 0x14a4 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    1490:	41 ff       	sbrs	r20, 1
    1492:	03 c0       	rjmp	.+6      	; 0x149a <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    1494:	fc 01       	movw	r30, r24
    1496:	65 83       	std	Z+5, r22	; 0x05
    1498:	02 c0       	rjmp	.+4      	; 0x149e <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    149a:	fc 01       	movw	r30, r24
    149c:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    149e:	fc 01       	movw	r30, r24
    14a0:	61 83       	std	Z+1, r22	; 0x01
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    14a4:	fc 01       	movw	r30, r24
    14a6:	62 83       	std	Z+2, r22	; 0x02
	}
}
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	08 95       	ret

000014ae <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    14ae:	8f ef       	ldi	r24, 0xFF	; 255
    14b0:	80 93 70 00 	sts	0x0070, r24
    14b4:	80 93 71 00 	sts	0x0071, r24
    14b8:	80 93 72 00 	sts	0x0072, r24
    14bc:	80 93 73 00 	sts	0x0073, r24
    14c0:	80 93 74 00 	sts	0x0074, r24
    14c4:	80 93 75 00 	sts	0x0075, r24
    14c8:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    14cc:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    14ce:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    14d0:	e0 e5       	ldi	r30, 0x50	; 80
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	90 81       	ld	r25, Z
    14d6:	92 60       	ori	r25, 0x02	; 2
    14d8:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    14da:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    14dc:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    14de:	81 ff       	sbrs	r24, 1
    14e0:	fd cf       	rjmp	.-6      	; 0x14dc <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    14e2:	61 e0       	ldi	r22, 0x01	; 1
    14e4:	80 e4       	ldi	r24, 0x40	; 64
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	15 d0       	rcall	.+42     	; 0x1514 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    14ea:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    14ec:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    14ee:	e0 e5       	ldi	r30, 0x50	; 80
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	90 81       	ld	r25, Z
    14f4:	9e 7f       	andi	r25, 0xFE	; 254
    14f6:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    14f8:	8f bf       	out	0x3f, r24	; 63
    14fa:	08 95       	ret

000014fc <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    14fc:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    14fe:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1500:	e8 2f       	mov	r30, r24
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	e0 59       	subi	r30, 0x90	; 144
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	60 95       	com	r22
    150a:	80 81       	ld	r24, Z
    150c:	68 23       	and	r22, r24
    150e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1510:	9f bf       	out	0x3f, r25	; 63
    1512:	08 95       	ret

00001514 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1514:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1516:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1518:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    151a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    151c:	60 83       	st	Z, r22
	ret                             // Return to caller
    151e:	08 95       	ret

00001520 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    1520:	43 e0       	ldi	r20, 0x03	; 3
    1522:	50 e0       	ldi	r21, 0x00	; 0
    1524:	68 e0       	ldi	r22, 0x08	; 8
    1526:	80 e6       	ldi	r24, 0x60	; 96
    1528:	96 e0       	ldi	r25, 0x06	; 6
    152a:	99 df       	rcall	.-206    	; 0x145e <ioport_configure_port_pin>
    152c:	40 e0       	ldi	r20, 0x00	; 0
    152e:	50 e0       	ldi	r21, 0x00	; 0
    1530:	64 e0       	ldi	r22, 0x04	; 4
    1532:	80 e6       	ldi	r24, 0x60	; 96
    1534:	96 e0       	ldi	r25, 0x06	; 6
    1536:	93 df       	rcall	.-218    	; 0x145e <ioport_configure_port_pin>
		| IOPORT_INIT_HIGH);
	ioport_configure_pin(IOPORT_CREATE_PIN(PORTD, 2), IOPORT_DIR_INPUT);
	
	//SPI
	//Set the pin used for slave select as output high
	ioport_configure_port_pin(&PORTC, PIN4_bm, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT);
    1538:	43 e0       	ldi	r20, 0x03	; 3
    153a:	50 e0       	ldi	r21, 0x00	; 0
    153c:	60 e1       	ldi	r22, 0x10	; 16
    153e:	80 e4       	ldi	r24, 0x40	; 64
    1540:	96 e0       	ldi	r25, 0x06	; 6
    1542:	8d df       	rcall	.-230    	; 0x145e <ioport_configure_port_pin>
		
	//Set MOSI and SCK as output high, and set MISO as input
	ioport_configure_port_pin(&PORTC, PIN5_bm, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT); //MOSI SDA
    1544:	43 e0       	ldi	r20, 0x03	; 3
    1546:	50 e0       	ldi	r21, 0x00	; 0
    1548:	60 e2       	ldi	r22, 0x20	; 32
    154a:	80 e4       	ldi	r24, 0x40	; 64
    154c:	96 e0       	ldi	r25, 0x06	; 6
    154e:	87 df       	rcall	.-242    	; 0x145e <ioport_configure_port_pin>
	ioport_configure_port_pin(&PORTC, PIN6_bm, IOPORT_DIR_INPUT); //MISO SCO
    1550:	40 e0       	ldi	r20, 0x00	; 0
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	60 e4       	ldi	r22, 0x40	; 64
    1556:	80 e4       	ldi	r24, 0x40	; 64
    1558:	96 e0       	ldi	r25, 0x06	; 6
    155a:	81 df       	rcall	.-254    	; 0x145e <ioport_configure_port_pin>
	ioport_configure_port_pin(&PORTC, PIN7_bm, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT); //SCK
    155c:	43 e0       	ldi	r20, 0x03	; 3
    155e:	50 e0       	ldi	r21, 0x00	; 0
    1560:	60 e8       	ldi	r22, 0x80	; 128
    1562:	80 e4       	ldi	r24, 0x40	; 64
    1564:	96 e0       	ldi	r25, 0x06	; 6
    1566:	7b df       	rcall	.-266    	; 0x145e <ioport_configure_port_pin>
    1568:	41 e0       	ldi	r20, 0x01	; 1
    156a:	50 e0       	ldi	r21, 0x00	; 0
    156c:	61 e0       	ldi	r22, 0x01	; 1
    156e:	80 e8       	ldi	r24, 0x80	; 128
    1570:	96 e0       	ldi	r25, 0x06	; 6
    1572:	75 df       	rcall	.-278    	; 0x145e <ioport_configure_port_pin>
    1574:	41 e0       	ldi	r20, 0x01	; 1
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	64 e0       	ldi	r22, 0x04	; 4
    157a:	80 e8       	ldi	r24, 0x80	; 128
    157c:	96 e0       	ldi	r25, 0x06	; 6
    157e:	6f cf       	rjmp	.-290    	; 0x145e <ioport_configure_port_pin>
    1580:	08 95       	ret

00001582 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    1582:	cf 92       	push	r12
    1584:	df 92       	push	r13
    1586:	ef 92       	push	r14
    1588:	ff 92       	push	r15
    158a:	cf 93       	push	r28
    158c:	df 93       	push	r29
    158e:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    1590:	6b 01       	movw	r12, r22
    1592:	e1 2c       	mov	r14, r1
    1594:	f1 2c       	mov	r15, r1
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	78 e4       	ldi	r23, 0x48	; 72
    159a:	88 ee       	ldi	r24, 0xE8	; 232
    159c:	91 e0       	ldi	r25, 0x01	; 1
    159e:	a7 01       	movw	r20, r14
    15a0:	96 01       	movw	r18, r12
    15a2:	fa d3       	rcall	.+2036   	; 0x1d98 <__udivmodsi4>
    15a4:	ca 01       	movw	r24, r20
    15a6:	b9 01       	movw	r22, r18
    15a8:	2f ef       	ldi	r18, 0xFF	; 255
    15aa:	3f ef       	ldi	r19, 0xFF	; 255
    15ac:	40 e0       	ldi	r20, 0x00	; 0
    15ae:	50 e0       	ldi	r21, 0x00	; 0
    15b0:	f3 d3       	rcall	.+2022   	; 0x1d98 <__udivmodsi4>
	if (smallest_div < 1) {
    15b2:	21 15       	cp	r18, r1
    15b4:	31 05       	cpc	r19, r1
    15b6:	29 f4       	brne	.+10     	; 0x15c2 <pwm_set_frequency+0x40>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    15bc:	21 e0       	ldi	r18, 0x01	; 1
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	2d c0       	rjmp	.+90     	; 0x161c <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    15c2:	22 30       	cpi	r18, 0x02	; 2
    15c4:	31 05       	cpc	r19, r1
    15c6:	28 f4       	brcc	.+10     	; 0x15d2 <pwm_set_frequency+0x50>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    15c8:	82 e0       	ldi	r24, 0x02	; 2
    15ca:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    15cc:	22 e0       	ldi	r18, 0x02	; 2
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	25 c0       	rjmp	.+74     	; 0x161c <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    15d2:	24 30       	cpi	r18, 0x04	; 4
    15d4:	31 05       	cpc	r19, r1
    15d6:	28 f4       	brcc	.+10     	; 0x15e2 <pwm_set_frequency+0x60>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    15d8:	83 e0       	ldi	r24, 0x03	; 3
    15da:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    15dc:	24 e0       	ldi	r18, 0x04	; 4
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	1d c0       	rjmp	.+58     	; 0x161c <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    15e2:	28 30       	cpi	r18, 0x08	; 8
    15e4:	31 05       	cpc	r19, r1
    15e6:	28 f4       	brcc	.+10     	; 0x15f2 <pwm_set_frequency+0x70>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    15e8:	84 e0       	ldi	r24, 0x04	; 4
    15ea:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    15ec:	28 e0       	ldi	r18, 0x08	; 8
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	15 c0       	rjmp	.+42     	; 0x161c <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    15f2:	20 34       	cpi	r18, 0x40	; 64
    15f4:	31 05       	cpc	r19, r1
    15f6:	28 f4       	brcc	.+10     	; 0x1602 <pwm_set_frequency+0x80>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    15f8:	85 e0       	ldi	r24, 0x05	; 5
    15fa:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    15fc:	20 e4       	ldi	r18, 0x40	; 64
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	0d c0       	rjmp	.+26     	; 0x161c <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    1602:	2f 3f       	cpi	r18, 0xFF	; 255
    1604:	31 05       	cpc	r19, r1
    1606:	09 f0       	breq	.+2      	; 0x160a <pwm_set_frequency+0x88>
    1608:	28 f4       	brcc	.+10     	; 0x1614 <pwm_set_frequency+0x92>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    160a:	86 e0       	ldi	r24, 0x06	; 6
    160c:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	31 e0       	ldi	r19, 0x01	; 1
    1612:	04 c0       	rjmp	.+8      	; 0x161c <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    1614:	87 e0       	ldi	r24, 0x07	; 7
    1616:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    161c:	40 e0       	ldi	r20, 0x00	; 0
    161e:	50 e0       	ldi	r21, 0x00	; 0
    1620:	60 e0       	ldi	r22, 0x00	; 0
    1622:	78 e4       	ldi	r23, 0x48	; 72
    1624:	88 ee       	ldi	r24, 0xE8	; 232
    1626:	91 e0       	ldi	r25, 0x01	; 1
    1628:	b7 d3       	rcall	.+1902   	; 0x1d98 <__udivmodsi4>
    162a:	ca 01       	movw	r24, r20
    162c:	b9 01       	movw	r22, r18
    162e:	a7 01       	movw	r20, r14
    1630:	96 01       	movw	r18, r12
    1632:	b2 d3       	rcall	.+1892   	; 0x1d98 <__udivmodsi4>
    1634:	2d 83       	std	Y+5, r18	; 0x05
    1636:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    1638:	24 36       	cpi	r18, 0x64	; 100
    163a:	31 05       	cpc	r19, r1
    163c:	18 f4       	brcc	.+6      	; 0x1644 <pwm_set_frequency+0xc2>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    163e:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    1640:	1d 82       	std	Y+5, r1	; 0x05
    1642:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	ff 90       	pop	r15
    164a:	ef 90       	pop	r14
    164c:	df 90       	pop	r13
    164e:	cf 90       	pop	r12
    1650:	08 95       	ret

00001652 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    1652:	0f 93       	push	r16
    1654:	1f 93       	push	r17
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	ec 01       	movw	r28, r24
    165c:	89 01       	movw	r16, r18
	/* Number of channels for this TC */
	uint8_t num_chan = 0;
	UNUSED(num_chan);

	/* Set TC and correct I/O pin to output */
	switch (tc) {
    165e:	62 30       	cpi	r22, 0x02	; 2
    1660:	b9 f1       	breq	.+110    	; 0x16d0 <pwm_init+0x7e>
    1662:	28 f4       	brcc	.+10     	; 0x166e <pwm_init+0x1c>
    1664:	66 23       	and	r22, r22
    1666:	51 f0       	breq	.+20     	; 0x167c <pwm_init+0x2a>
    1668:	61 30       	cpi	r22, 0x01	; 1
    166a:	e9 f0       	breq	.+58     	; 0x16a6 <pwm_init+0x54>
    166c:	6f c0       	rjmp	.+222    	; 0x174c <pwm_init+0xfa>
    166e:	63 30       	cpi	r22, 0x03	; 3
    1670:	09 f4       	brne	.+2      	; 0x1674 <pwm_init+0x22>
    1672:	43 c0       	rjmp	.+134    	; 0x16fa <pwm_init+0xa8>
    1674:	64 30       	cpi	r22, 0x04	; 4
    1676:	09 f4       	brne	.+2      	; 0x167a <pwm_init+0x28>
    1678:	55 c0       	rjmp	.+170    	; 0x1724 <pwm_init+0xd2>
    167a:	68 c0       	rjmp	.+208    	; 0x174c <pwm_init+0xfa>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	98 e0       	ldi	r25, 0x08	; 8
    1680:	88 83       	st	Y, r24
    1682:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    1684:	e0 e4       	ldi	r30, 0x40	; 64
    1686:	f6 e0       	ldi	r31, 0x06	; 6
    1688:	50 81       	ld	r21, Z
    168a:	21 e0       	ldi	r18, 0x01	; 1
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	8f ef       	ldi	r24, 0xFF	; 255
    1690:	84 0f       	add	r24, r20
    1692:	b9 01       	movw	r22, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <pwm_init+0x48>
    1696:	66 0f       	add	r22, r22
    1698:	77 1f       	adc	r23, r23
    169a:	8a 95       	dec	r24
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <pwm_init+0x44>
    169e:	cb 01       	movw	r24, r22
    16a0:	85 2b       	or	r24, r21
    16a2:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    16a4:	53 c0       	rjmp	.+166    	; 0x174c <pwm_init+0xfa>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    16a6:	80 e4       	ldi	r24, 0x40	; 64
    16a8:	98 e0       	ldi	r25, 0x08	; 8
    16aa:	88 83       	st	Y, r24
    16ac:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    16ae:	e0 e4       	ldi	r30, 0x40	; 64
    16b0:	f6 e0       	ldi	r31, 0x06	; 6
    16b2:	50 81       	ld	r21, Z
    16b4:	21 e0       	ldi	r18, 0x01	; 1
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	83 e0       	ldi	r24, 0x03	; 3
    16ba:	84 0f       	add	r24, r20
    16bc:	b9 01       	movw	r22, r18
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <pwm_init+0x72>
    16c0:	66 0f       	add	r22, r22
    16c2:	77 1f       	adc	r23, r23
    16c4:	8a 95       	dec	r24
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <pwm_init+0x6e>
    16c8:	cb 01       	movw	r24, r22
    16ca:	85 2b       	or	r24, r21
    16cc:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    16ce:	3e c0       	rjmp	.+124    	; 0x174c <pwm_init+0xfa>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	99 e0       	ldi	r25, 0x09	; 9
    16d4:	88 83       	st	Y, r24
    16d6:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    16d8:	e0 e6       	ldi	r30, 0x60	; 96
    16da:	f6 e0       	ldi	r31, 0x06	; 6
    16dc:	50 81       	ld	r21, Z
    16de:	21 e0       	ldi	r18, 0x01	; 1
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	8f ef       	ldi	r24, 0xFF	; 255
    16e4:	84 0f       	add	r24, r20
    16e6:	b9 01       	movw	r22, r18
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <pwm_init+0x9c>
    16ea:	66 0f       	add	r22, r22
    16ec:	77 1f       	adc	r23, r23
    16ee:	8a 95       	dec	r24
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <pwm_init+0x98>
    16f2:	cb 01       	movw	r24, r22
    16f4:	85 2b       	or	r24, r21
    16f6:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    16f8:	29 c0       	rjmp	.+82     	; 0x174c <pwm_init+0xfa>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    16fa:	80 e4       	ldi	r24, 0x40	; 64
    16fc:	99 e0       	ldi	r25, 0x09	; 9
    16fe:	88 83       	st	Y, r24
    1700:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    1702:	e0 e6       	ldi	r30, 0x60	; 96
    1704:	f6 e0       	ldi	r31, 0x06	; 6
    1706:	50 81       	ld	r21, Z
    1708:	21 e0       	ldi	r18, 0x01	; 1
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	83 e0       	ldi	r24, 0x03	; 3
    170e:	84 0f       	add	r24, r20
    1710:	b9 01       	movw	r22, r18
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <pwm_init+0xc6>
    1714:	66 0f       	add	r22, r22
    1716:	77 1f       	adc	r23, r23
    1718:	8a 95       	dec	r24
    171a:	e2 f7       	brpl	.-8      	; 0x1714 <pwm_init+0xc2>
    171c:	cb 01       	movw	r24, r22
    171e:	85 2b       	or	r24, r21
    1720:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    1722:	14 c0       	rjmp	.+40     	; 0x174c <pwm_init+0xfa>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	9a e0       	ldi	r25, 0x0A	; 10
    1728:	88 83       	st	Y, r24
    172a:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    172c:	e0 e8       	ldi	r30, 0x80	; 128
    172e:	f6 e0       	ldi	r31, 0x06	; 6
    1730:	50 81       	ld	r21, Z
    1732:	21 e0       	ldi	r18, 0x01	; 1
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	8f ef       	ldi	r24, 0xFF	; 255
    1738:	84 0f       	add	r24, r20
    173a:	b9 01       	movw	r22, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <pwm_init+0xf0>
    173e:	66 0f       	add	r22, r22
    1740:	77 1f       	adc	r23, r23
    1742:	8a 95       	dec	r24
    1744:	e2 f7       	brpl	.-8      	; 0x173e <pwm_init+0xec>
    1746:	cb 01       	movw	r24, r22
    1748:	85 2b       	or	r24, r21
    174a:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    174c:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    174e:	42 30       	cpi	r20, 0x02	; 2
    1750:	61 f0       	breq	.+24     	; 0x176a <pwm_init+0x118>
    1752:	18 f4       	brcc	.+6      	; 0x175a <pwm_init+0x108>
    1754:	41 30       	cpi	r20, 0x01	; 1
    1756:	31 f0       	breq	.+12     	; 0x1764 <pwm_init+0x112>
    1758:	10 c0       	rjmp	.+32     	; 0x177a <pwm_init+0x128>
    175a:	43 30       	cpi	r20, 0x03	; 3
    175c:	49 f0       	breq	.+18     	; 0x1770 <pwm_init+0x11e>
    175e:	44 30       	cpi	r20, 0x04	; 4
    1760:	51 f0       	breq	.+20     	; 0x1776 <pwm_init+0x124>
    1762:	0b c0       	rjmp	.+22     	; 0x177a <pwm_init+0x128>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    1764:	80 e1       	ldi	r24, 0x10	; 16
    1766:	8b 83       	std	Y+3, r24	; 0x03
		break;
    1768:	08 c0       	rjmp	.+16     	; 0x177a <pwm_init+0x128>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    176a:	80 e2       	ldi	r24, 0x20	; 32
    176c:	8b 83       	std	Y+3, r24	; 0x03
		break;
    176e:	05 c0       	rjmp	.+10     	; 0x177a <pwm_init+0x128>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    1770:	80 e4       	ldi	r24, 0x40	; 64
    1772:	8b 83       	std	Y+3, r24	; 0x03
		break;
    1774:	02 c0       	rjmp	.+4      	; 0x177a <pwm_init+0x128>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    1776:	80 e8       	ldi	r24, 0x80	; 128
    1778:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    177a:	88 81       	ld	r24, Y
    177c:	99 81       	ldd	r25, Y+1	; 0x01
    177e:	27 dc       	rcall	.-1970   	; 0xfce <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    1780:	e8 81       	ld	r30, Y
    1782:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    1784:	81 81       	ldd	r24, Z+1	; 0x01
    1786:	88 7f       	andi	r24, 0xF8	; 248
    1788:	83 60       	ori	r24, 0x03	; 3
    178a:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    178c:	1d 82       	std	Y+5, r1	; 0x05
    178e:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    1790:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    1792:	e8 81       	ld	r30, Y
    1794:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    1796:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    1798:	80 7f       	andi	r24, 0xF0	; 240
    179a:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    179c:	b8 01       	movw	r22, r16
    179e:	ce 01       	movw	r24, r28
    17a0:	f0 de       	rcall	.-544    	; 0x1582 <pwm_set_frequency>
}
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	1f 91       	pop	r17
    17a8:	0f 91       	pop	r16
    17aa:	08 95       	ret

000017ac <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	ec 01       	movw	r28, r24
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
			(uint16_t)(((uint32_t)config->period *
    17b2:	ad 81       	ldd	r26, Y+5	; 0x05
    17b4:	be 81       	ldd	r27, Y+6	; 0x06
    17b6:	26 2f       	mov	r18, r22
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	16 d3       	rcall	.+1580   	; 0x1de8 <__umulhisi3>
			(uint32_t)duty_cycle_scale) / 100));
    17bc:	24 e6       	ldi	r18, 0x64	; 100
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e0       	ldi	r20, 0x00	; 0
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	e9 d2       	rcall	.+1490   	; 0x1d98 <__udivmodsi4>
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	e8 81       	ld	r30, Y
    17ca:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    17cc:	e6 fd       	sbrc	r30, 6
    17ce:	17 c0       	rjmp	.+46     	; 0x17fe <pwm_start+0x52>
		switch (channel_index) {
    17d0:	82 30       	cpi	r24, 0x02	; 2
    17d2:	61 f0       	breq	.+24     	; 0x17ec <pwm_start+0x40>
    17d4:	18 f4       	brcc	.+6      	; 0x17dc <pwm_start+0x30>
    17d6:	81 30       	cpi	r24, 0x01	; 1
    17d8:	31 f0       	breq	.+12     	; 0x17e6 <pwm_start+0x3a>
    17da:	1b c0       	rjmp	.+54     	; 0x1812 <pwm_start+0x66>
    17dc:	83 30       	cpi	r24, 0x03	; 3
    17de:	49 f0       	breq	.+18     	; 0x17f2 <pwm_start+0x46>
    17e0:	84 30       	cpi	r24, 0x04	; 4
    17e2:	51 f0       	breq	.+20     	; 0x17f8 <pwm_start+0x4c>
    17e4:	16 c0       	rjmp	.+44     	; 0x1812 <pwm_start+0x66>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    17e6:	20 af       	std	Z+56, r18	; 0x38
    17e8:	31 af       	std	Z+57, r19	; 0x39
    17ea:	13 c0       	rjmp	.+38     	; 0x1812 <pwm_start+0x66>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    17ec:	22 af       	std	Z+58, r18	; 0x3a
    17ee:	33 af       	std	Z+59, r19	; 0x3b
    17f0:	10 c0       	rjmp	.+32     	; 0x1812 <pwm_start+0x66>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    17f2:	24 af       	std	Z+60, r18	; 0x3c
    17f4:	35 af       	std	Z+61, r19	; 0x3d
    17f6:	0d c0       	rjmp	.+26     	; 0x1812 <pwm_start+0x66>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    17f8:	26 af       	std	Z+62, r18	; 0x3e
    17fa:	37 af       	std	Z+63, r19	; 0x3f
    17fc:	0a c0       	rjmp	.+20     	; 0x1812 <pwm_start+0x66>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    17fe:	81 30       	cpi	r24, 0x01	; 1
    1800:	19 f0       	breq	.+6      	; 0x1808 <pwm_start+0x5c>
    1802:	82 30       	cpi	r24, 0x02	; 2
    1804:	21 f0       	breq	.+8      	; 0x180e <pwm_start+0x62>
    1806:	05 c0       	rjmp	.+10     	; 0x1812 <pwm_start+0x66>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    1808:	20 af       	std	Z+56, r18	; 0x38
    180a:	31 af       	std	Z+57, r19	; 0x39
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <pwm_start+0x66>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    180e:	22 af       	std	Z+58, r18	; 0x3a
    1810:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    1812:	8d 81       	ldd	r24, Y+5	; 0x05
    1814:	9e 81       	ldd	r25, Y+6	; 0x06
    1816:	e8 81       	ld	r30, Y
    1818:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    181a:	86 a3       	std	Z+38, r24	; 0x26
    181c:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	e8 81       	ld	r30, Y
    1822:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    1824:	e6 fd       	sbrc	r30, 6
    1826:	04 c0       	rjmp	.+8      	; 0x1830 <pwm_start+0x84>
		((TC0_t *)tc)->CTRLB |= enablemask;
    1828:	91 81       	ldd	r25, Z+1	; 0x01
    182a:	89 2b       	or	r24, r25
    182c:	81 83       	std	Z+1, r24	; 0x01
    182e:	04 c0       	rjmp	.+8      	; 0x1838 <pwm_start+0x8c>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    1830:	91 81       	ldd	r25, Z+1	; 0x01
    1832:	80 73       	andi	r24, 0x30	; 48
    1834:	89 2b       	or	r24, r25
    1836:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    1838:	e8 81       	ld	r30, Y
    183a:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    183c:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    183e:	80 7f       	andi	r24, 0xF0	; 240
    1840:	9c 81       	ldd	r25, Y+4	; 0x04
    1842:	89 2b       	or	r24, r25
    1844:	80 83       	st	Z, r24
}
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	08 95       	ret

0000184c <buf_init>:
#include <string.h>

// init
void buf_init()
{
	pIn = pOut = buf;       // init to any slot in buffer
    184c:	8e e4       	ldi	r24, 0x4E	; 78
    184e:	90 e2       	ldi	r25, 0x20	; 32
    1850:	80 93 b2 20 	sts	0x20B2, r24
    1854:	90 93 b3 20 	sts	0x20B3, r25
    1858:	80 93 48 20 	sts	0x2048, r24
    185c:	90 93 49 20 	sts	0x2049, r25
	pEnd = &buf[BUFSIZE];   // past last valid slot in buffer
    1860:	82 eb       	ldi	r24, 0xB2	; 178
    1862:	90 e2       	ldi	r25, 0x20	; 32
    1864:	80 93 4c 20 	sts	0x204C, r24
    1868:	90 93 4d 20 	sts	0x204D, r25
	rxBufferFull = 0;               // buffer is empty
    186c:	10 92 4a 20 	sts	0x204A, r1
	bytes_rx = 0;
    1870:	10 92 4b 20 	sts	0x204B, r1
	commands_in_buf = 0;
    1874:	10 92 b5 20 	sts	0x20B5, r1
    1878:	08 95       	ret

0000187a <buf_put>:
}

// add char 'c' to buffer
int buf_put(char c)
{
	if (pIn == pOut  &&  rxBufferFull)
    187a:	e0 91 48 20 	lds	r30, 0x2048
    187e:	f0 91 49 20 	lds	r31, 0x2049
    1882:	20 91 b2 20 	lds	r18, 0x20B2
    1886:	30 91 b3 20 	lds	r19, 0x20B3
    188a:	e2 17       	cp	r30, r18
    188c:	f3 07       	cpc	r31, r19
    188e:	21 f4       	brne	.+8      	; 0x1898 <buf_put+0x1e>
    1890:	90 91 4a 20 	lds	r25, 0x204A
    1894:	91 11       	cpse	r25, r1
    1896:	2a c0       	rjmp	.+84     	; 0x18ec <buf_put+0x72>
	return 0;				// buffer overrun

	*pIn++ = c;             // insert c into buffer
    1898:	9f 01       	movw	r18, r30
    189a:	2f 5f       	subi	r18, 0xFF	; 255
    189c:	3f 4f       	sbci	r19, 0xFF	; 255
    189e:	20 93 48 20 	sts	0x2048, r18
    18a2:	30 93 49 20 	sts	0x2049, r19
    18a6:	80 83       	st	Z, r24
	if (pIn >= pEnd)        // end of circular buffer?
    18a8:	20 91 48 20 	lds	r18, 0x2048
    18ac:	30 91 49 20 	lds	r19, 0x2049
    18b0:	80 91 4c 20 	lds	r24, 0x204C
    18b4:	90 91 4d 20 	lds	r25, 0x204D
    18b8:	28 17       	cp	r18, r24
    18ba:	39 07       	cpc	r19, r25
    18bc:	30 f0       	brcs	.+12     	; 0x18ca <buf_put+0x50>
	pIn = buf;				// wrap around
    18be:	8e e4       	ldi	r24, 0x4E	; 78
    18c0:	90 e2       	ldi	r25, 0x20	; 32
    18c2:	80 93 48 20 	sts	0x2048, r24
    18c6:	90 93 49 20 	sts	0x2049, r25

	if (pIn == pOut)        // did we run into the output ptr?
    18ca:	20 91 48 20 	lds	r18, 0x2048
    18ce:	30 91 49 20 	lds	r19, 0x2049
    18d2:	80 91 b2 20 	lds	r24, 0x20B2
    18d6:	90 91 b3 20 	lds	r25, 0x20B3
    18da:	28 17       	cp	r18, r24
    18dc:	39 07       	cpc	r19, r25
    18de:	49 f4       	brne	.+18     	; 0x18f2 <buf_put+0x78>
	rxBufferFull = 1;       // can't add any more data into buffer
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	80 93 4a 20 	sts	0x204A, r24
	return 1;               // all OK
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	08 95       	ret

// add char 'c' to buffer
int buf_put(char c)
{
	if (pIn == pOut  &&  rxBufferFull)
	return 0;				// buffer overrun
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	08 95       	ret
	if (pIn >= pEnd)        // end of circular buffer?
	pIn = buf;				// wrap around

	if (pIn == pOut)        // did we run into the output ptr?
	rxBufferFull = 1;       // can't add any more data into buffer
	return 1;               // all OK
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	90 e0       	ldi	r25, 0x00	; 0
}
    18f6:	08 95       	ret

000018f8 <buf_get>:

// get a char from circular buffer
int buf_get(char *pc)
{
	if (pIn == pOut  &&  !rxBufferFull)
    18f8:	e0 91 b2 20 	lds	r30, 0x20B2
    18fc:	f0 91 b3 20 	lds	r31, 0x20B3
    1900:	20 91 48 20 	lds	r18, 0x2048
    1904:	30 91 49 20 	lds	r19, 0x2049
    1908:	2e 17       	cp	r18, r30
    190a:	3f 07       	cpc	r19, r31
    190c:	21 f4       	brne	.+8      	; 0x1916 <buf_get+0x1e>
    190e:	20 91 4a 20 	lds	r18, 0x204A
    1912:	22 23       	and	r18, r18
    1914:	01 f1       	breq	.+64     	; 0x1956 <buf_get+0x5e>
	return 0;				// buffer empty  FAIL

	*pc = *pOut++;          // pick up next char to be returned
    1916:	9f 01       	movw	r18, r30
    1918:	2f 5f       	subi	r18, 0xFF	; 255
    191a:	3f 4f       	sbci	r19, 0xFF	; 255
    191c:	20 93 b2 20 	sts	0x20B2, r18
    1920:	30 93 b3 20 	sts	0x20B3, r19
    1924:	20 81       	ld	r18, Z
    1926:	fc 01       	movw	r30, r24
    1928:	20 83       	st	Z, r18
	if (pOut >= pEnd)       // end of circular buffer?
    192a:	20 91 b2 20 	lds	r18, 0x20B2
    192e:	30 91 b3 20 	lds	r19, 0x20B3
    1932:	80 91 4c 20 	lds	r24, 0x204C
    1936:	90 91 4d 20 	lds	r25, 0x204D
    193a:	28 17       	cp	r18, r24
    193c:	39 07       	cpc	r19, r25
    193e:	30 f0       	brcs	.+12     	; 0x194c <buf_get+0x54>
	pOut = buf;				// wrap around
    1940:	8e e4       	ldi	r24, 0x4E	; 78
    1942:	90 e2       	ldi	r25, 0x20	; 32
    1944:	80 93 b2 20 	sts	0x20B2, r24
    1948:	90 93 b3 20 	sts	0x20B3, r25

	rxBufferFull = 0;       // there is at least 1 slot
    194c:	10 92 4a 20 	sts	0x204A, r1
	return 1;               // *pc has the data to be returned
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	08 95       	ret

// get a char from circular buffer
int buf_get(char *pc)
{
	if (pIn == pOut  &&  !rxBufferFull)
	return 0;				// buffer empty  FAIL
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	90 e0       	ldi	r25, 0x00	; 0
	if (pOut >= pEnd)       // end of circular buffer?
	pOut = buf;				// wrap around

	rxBufferFull = 0;       // there is at least 1 slot
	return 1;               // *pc has the data to be returned
}
    195a:	08 95       	ret

0000195c <buf_clear>:

void buf_clear(void)
{
	memset(&buf[0], 0, BUFSIZE);
    195c:	ee e4       	ldi	r30, 0x4E	; 78
    195e:	f0 e2       	ldi	r31, 0x20	; 32
    1960:	84 e6       	ldi	r24, 0x64	; 100
    1962:	df 01       	movw	r26, r30
    1964:	1d 92       	st	X+, r1
    1966:	8a 95       	dec	r24
    1968:	e9 f7       	brne	.-6      	; 0x1964 <buf_clear+0x8>
	pIn = pOut = buf;       // init to any slot in buffer
    196a:	e0 93 b2 20 	sts	0x20B2, r30
    196e:	f0 93 b3 20 	sts	0x20B3, r31
    1972:	e0 93 48 20 	sts	0x2048, r30
    1976:	f0 93 49 20 	sts	0x2049, r31
	rxBufferFull = 0;       // buffer is empty
    197a:	10 92 4a 20 	sts	0x204A, r1
	bytes_rx = 0;
    197e:	10 92 4b 20 	sts	0x204B, r1
	commands_in_buf = 0;
    1982:	10 92 b5 20 	sts	0x20B5, r1
    1986:	08 95       	ret

00001988 <parseCommand>:
}

void parseCommand(void)
{
    1988:	cf 93       	push	r28
    198a:	df 93       	push	r29
    198c:	00 d0       	rcall	.+0      	; 0x198e <parseCommand+0x6>
    198e:	00 d0       	rcall	.+0      	; 0x1990 <parseCommand+0x8>
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
	char byte1;
	char byte2;
	char byte3;
	char byte4;
	
	buf_get(&byte1);
    1994:	ce 01       	movw	r24, r28
    1996:	01 96       	adiw	r24, 0x01	; 1
    1998:	af df       	rcall	.-162    	; 0x18f8 <buf_get>
	buf_get(&byte2);
    199a:	ce 01       	movw	r24, r28
    199c:	02 96       	adiw	r24, 0x02	; 2
    199e:	ac df       	rcall	.-168    	; 0x18f8 <buf_get>
	buf_get(&byte3);
    19a0:	ce 01       	movw	r24, r28
    19a2:	03 96       	adiw	r24, 0x03	; 3
    19a4:	a9 df       	rcall	.-174    	; 0x18f8 <buf_get>
	buf_get(&byte4);
    19a6:	ce 01       	movw	r24, r28
    19a8:	04 96       	adiw	r24, 0x04	; 4
    19aa:	a6 df       	rcall	.-180    	; 0x18f8 <buf_get>
	
	if(byte1 & CMD_TYPE_bm){
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	88 23       	and	r24, r24
    19b0:	fc f4       	brge	.+62     	; 0x19f0 <parseCommand+0x68>
		CMDstate = Speed;
    19b2:	10 92 46 20 	sts	0x2046, r1
		if(byte1 & ML_DIR_bm){
    19b6:	86 ff       	sbrs	r24, 6
    19b8:	05 c0       	rjmp	.+10     	; 0x19c4 <parseCommand+0x3c>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    19ba:	91 e0       	ldi	r25, 0x01	; 1
    19bc:	e0 e8       	ldi	r30, 0x80	; 128
    19be:	f6 e0       	ldi	r31, 0x06	; 6
    19c0:	95 83       	std	Z+5, r25	; 0x05
    19c2:	04 c0       	rjmp	.+8      	; 0x19cc <parseCommand+0x44>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    19c4:	91 e0       	ldi	r25, 0x01	; 1
    19c6:	e0 e8       	ldi	r30, 0x80	; 128
    19c8:	f6 e0       	ldi	r31, 0x06	; 6
    19ca:	96 83       	std	Z+6, r25	; 0x06
			ioport_set_pin_level(PE0,1);
		}//if
		else{
			ioport_set_pin_level(PE0,0);
		}//else
		mlDutyCycle = byte2;
    19cc:	9a 81       	ldd	r25, Y+2	; 0x02
    19ce:	90 93 45 20 	sts	0x2045, r25
		
		if(byte1 & MR_DIR_bm){
    19d2:	85 ff       	sbrs	r24, 5
    19d4:	05 c0       	rjmp	.+10     	; 0x19e0 <parseCommand+0x58>
    19d6:	84 e0       	ldi	r24, 0x04	; 4
    19d8:	e0 e8       	ldi	r30, 0x80	; 128
    19da:	f6 e0       	ldi	r31, 0x06	; 6
    19dc:	86 83       	std	Z+6, r24	; 0x06
    19de:	04 c0       	rjmp	.+8      	; 0x19e8 <parseCommand+0x60>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    19e0:	84 e0       	ldi	r24, 0x04	; 4
    19e2:	e0 e8       	ldi	r30, 0x80	; 128
    19e4:	f6 e0       	ldi	r31, 0x06	; 6
    19e6:	85 83       	std	Z+5, r24	; 0x05
			ioport_set_pin_level(PE2,0);
		}//if
		else{
			ioport_set_pin_level(PE2,1);
		}//else
		mrDutyCycle = byte3;
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	80 93 b4 20 	sts	0x20B4, r24
    19ee:	16 c0       	rjmp	.+44     	; 0x1a1c <parseCommand+0x94>
		
	}//if
	else{
		if(byte1 & POS_GET){
    19f0:	84 ff       	sbrs	r24, 4
    19f2:	04 c0       	rjmp	.+8      	; 0x19fc <parseCommand+0x74>
			sendPositionFlag = true;	
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	80 93 43 20 	sts	0x2043, r24
    19fa:	10 c0       	rjmp	.+32     	; 0x1a1c <parseCommand+0x94>
		}//if
		else{
			if(byte1 & ML_POS_bm){
    19fc:	86 ff       	sbrs	r24, 6
    19fe:	06 c0       	rjmp	.+12     	; 0x1a0c <parseCommand+0x84>
				CMDstate = Position;
    1a00:	91 e0       	ldi	r25, 0x01	; 1
    1a02:	90 93 46 20 	sts	0x2046, r25
				if(byte2 <= 192){
					mlDestination = byte2;
    1a06:	9a 81       	ldd	r25, Y+2	; 0x02
    1a08:	90 93 47 20 	sts	0x2047, r25
				}//if
			}//if
			if(byte1 & MR_POS_bm){
    1a0c:	85 ff       	sbrs	r24, 5
    1a0e:	06 c0       	rjmp	.+12     	; 0x1a1c <parseCommand+0x94>
				CMDstate = Position;
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	80 93 46 20 	sts	0x2046, r24
				if(byte3 <= 192){
					mrDestination = byte3;
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	80 93 44 20 	sts	0x2044, r24
				}//if
			}//if
		}//else
	}//else
    1a1c:	24 96       	adiw	r28, 0x04	; 4
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	de bf       	out	0x3e, r29	; 62
    1a22:	df 91       	pop	r29
    1a24:	cf 91       	pop	r28
    1a26:	08 95       	ret

00001a28 <main>:
	state = (state <<1) | (! gpio_pin_is_low(button)) | 0xE000 ;
	if(state == 0xF000){
		return 1;
	}
	return 0;
}
    1a28:	cf 93       	push	r28
    1a2a:	df 93       	push	r29
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
    1a30:	ea 97       	sbiw	r28, 0x3a	; 58
    1a32:	cd bf       	out	0x3d, r28	; 61
    1a34:	de bf       	out	0x3e, r29	; 62
    1a36:	3b dd       	rcall	.-1418   	; 0x14ae <sysclk_init>
    1a38:	73 dd       	rcall	.-1306   	; 0x1520 <board_init>
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	4e 96       	adiw	r24, 0x1e	; 30
    1a3e:	0e 94 45 01 	call	0x28a	; 0x28a <qdec_get_config_defaults>
    1a42:	02 e3       	ldi	r16, 0x32	; 50
    1a44:	10 e0       	ldi	r17, 0x00	; 0
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	40 e0       	ldi	r20, 0x00	; 0
    1a4a:	60 e2       	ldi	r22, 0x20	; 32
    1a4c:	76 e0       	ldi	r23, 0x06	; 6
    1a4e:	ce 01       	movw	r24, r28
    1a50:	4e 96       	adiw	r24, 0x1e	; 30
    1a52:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <qdec_config_phase_pins>
    1a56:	60 ec       	ldi	r22, 0xC0	; 192
    1a58:	70 e0       	ldi	r23, 0x00	; 0
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	4e 96       	adiw	r24, 0x1e	; 30
    1a5e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <qdec_config_revolution>
    1a62:	ce 01       	movw	r24, r28
    1a64:	4e 96       	adiw	r24, 0x1e	; 30
    1a66:	0e 94 82 01 	call	0x304	; 0x304 <qdec_enabled>
    1a6a:	ce 01       	movw	r24, r28
    1a6c:	01 96       	adiw	r24, 0x01	; 1
    1a6e:	0e 94 45 01 	call	0x28a	; 0x28a <qdec_get_config_defaults>
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	40 e0       	ldi	r20, 0x00	; 0
    1a76:	60 e4       	ldi	r22, 0x40	; 64
    1a78:	76 e0       	ldi	r23, 0x06	; 6
    1a7a:	ce 01       	movw	r24, r28
    1a7c:	01 96       	adiw	r24, 0x01	; 1
    1a7e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <qdec_config_phase_pins>
    1a82:	60 ec       	ldi	r22, 0xC0	; 192
    1a84:	70 e0       	ldi	r23, 0x00	; 0
    1a86:	ce 01       	movw	r24, r28
    1a88:	01 96       	adiw	r24, 0x01	; 1
    1a8a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <qdec_config_revolution>
    1a8e:	62 e0       	ldi	r22, 0x02	; 2
    1a90:	ce 01       	movw	r24, r28
    1a92:	01 96       	adiw	r24, 0x01	; 1
    1a94:	0e 94 77 01 	call	0x2ee	; 0x2ee <qdec_config_event_channel>
    1a98:	60 e0       	ldi	r22, 0x00	; 0
    1a9a:	79 e0       	ldi	r23, 0x09	; 9
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <qdec_config_tc>
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	01 96       	adiw	r24, 0x01	; 1
    1aa8:	0e 94 82 01 	call	0x304	; 0x304 <qdec_enabled>
    1aac:	60 e1       	ldi	r22, 0x10	; 16
    1aae:	84 e0       	ldi	r24, 0x04	; 4
    1ab0:	25 dd       	rcall	.-1462   	; 0x14fc <sysclk_enable_module>
    1ab2:	60 e0       	ldi	r22, 0x00	; 0
    1ab4:	70 e2       	ldi	r23, 0x20	; 32
    1ab6:	80 ea       	ldi	r24, 0xA0	; 160
    1ab8:	99 e0       	ldi	r25, 0x09	; 9
    1aba:	e5 db       	rcall	.-2102   	; 0x1286 <usart_init_rs232>
    1abc:	c7 de       	rcall	.-626    	; 0x184c <buf_init>
    1abe:	62 e0       	ldi	r22, 0x02	; 2
    1ac0:	84 e0       	ldi	r24, 0x04	; 4
    1ac2:	1c dd       	rcall	.-1480   	; 0x14fc <sysclk_enable_module>
    1ac4:	87 e0       	ldi	r24, 0x07	; 7
    1ac6:	e0 ea       	ldi	r30, 0xA0	; 160
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	82 83       	std	Z+2, r24	; 0x02
    1acc:	e0 ea       	ldi	r30, 0xA0	; 160
    1ace:	f9 e0       	ldi	r31, 0x09	; 9
    1ad0:	83 81       	ldd	r24, Z+3	; 0x03
    1ad2:	80 63       	ori	r24, 0x30	; 48
    1ad4:	83 83       	std	Z+3, r24	; 0x03
    1ad6:	e0 e0       	ldi	r30, 0x00	; 0
    1ad8:	f8 e0       	ldi	r31, 0x08	; 8
    1ada:	86 81       	ldd	r24, Z+6	; 0x06
    1adc:	83 60       	ori	r24, 0x03	; 3
    1ade:	86 83       	std	Z+6, r24	; 0x06
    1ae0:	87 81       	ldd	r24, Z+7	; 0x07
    1ae2:	8c 60       	ori	r24, 0x0C	; 12
    1ae4:	87 83       	std	Z+7, r24	; 0x07
    1ae6:	e0 e4       	ldi	r30, 0x40	; 64
    1ae8:	f9 e0       	ldi	r31, 0x09	; 9
    1aea:	80 81       	ld	r24, Z
    1aec:	82 60       	ori	r24, 0x02	; 2
    1aee:	80 83       	st	Z, r24
    1af0:	86 81       	ldd	r24, Z+6	; 0x06
    1af2:	83 60       	ori	r24, 0x03	; 3
    1af4:	86 83       	std	Z+6, r24	; 0x06
    1af6:	8f ef       	ldi	r24, 0xFF	; 255
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	86 a3       	std	Z+38, r24	; 0x26
    1afc:	97 a3       	std	Z+39, r25	; 0x27
    1afe:	78 94       	sei
    1b00:	20 e5       	ldi	r18, 0x50	; 80
    1b02:	33 ec       	ldi	r19, 0xC3	; 195
    1b04:	42 e0       	ldi	r20, 0x02	; 2
    1b06:	64 e0       	ldi	r22, 0x04	; 4
    1b08:	8d eb       	ldi	r24, 0xBD	; 189
    1b0a:	90 e2       	ldi	r25, 0x20	; 32
    1b0c:	a2 dd       	rcall	.-1212   	; 0x1652 <pwm_init>
    1b0e:	20 e5       	ldi	r18, 0x50	; 80
    1b10:	33 ec       	ldi	r19, 0xC3	; 195
    1b12:	44 e0       	ldi	r20, 0x04	; 4
    1b14:	64 e0       	ldi	r22, 0x04	; 4
    1b16:	86 eb       	ldi	r24, 0xB6	; 182
    1b18:	90 e2       	ldi	r25, 0x20	; 32
    1b1a:	9b dd       	rcall	.-1226   	; 0x1652 <pwm_init>
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	e0 e8       	ldi	r30, 0x80	; 128
    1b20:	f6 e0       	ldi	r31, 0x06	; 6
    1b22:	85 83       	std	Z+5, r24	; 0x05
    1b24:	10 92 b4 20 	sts	0x20B4, r1
    1b28:	10 92 45 20 	sts	0x2045, r1
    1b2c:	10 92 47 20 	sts	0x2047, r1
    1b30:	10 92 44 20 	sts	0x2044, r1
    1b34:	10 92 43 20 	sts	0x2043, r1
    1b38:	68 94       	set
    1b3a:	ee 24       	eor	r14, r14
    1b3c:	e5 f8       	bld	r14, 5
    1b3e:	ff 24       	eor	r15, r15
    1b40:	f3 f8       	bld	r15, 3
    1b42:	00 e2       	ldi	r16, 0x20	; 32
    1b44:	19 e0       	ldi	r17, 0x09	; 9
    1b46:	0f 2e       	mov	r0, r31
    1b48:	f2 e3       	ldi	r31, 0x32	; 50
    1b4a:	bf 2e       	mov	r11, r31
    1b4c:	f0 2d       	mov	r31, r0
    1b4e:	0f 2e       	mov	r0, r31
    1b50:	f0 e8       	ldi	r31, 0x80	; 128
    1b52:	cf 2e       	mov	r12, r31
    1b54:	f6 e0       	ldi	r31, 0x06	; 6
    1b56:	df 2e       	mov	r13, r31
    1b58:	f0 2d       	mov	r31, r0
    1b5a:	99 24       	eor	r9, r9
    1b5c:	93 94       	inc	r9
    1b5e:	68 94       	set
    1b60:	aa 24       	eor	r10, r10
    1b62:	a2 f8       	bld	r10, 2
    1b64:	60 91 b4 20 	lds	r22, 0x20B4
    1b68:	8d eb       	ldi	r24, 0xBD	; 189
    1b6a:	90 e2       	ldi	r25, 0x20	; 32
    1b6c:	1f de       	rcall	.-962    	; 0x17ac <pwm_start>
    1b6e:	60 91 45 20 	lds	r22, 0x2045
    1b72:	86 eb       	ldi	r24, 0xB6	; 182
    1b74:	90 e2       	ldi	r25, 0x20	; 32
    1b76:	1a de       	rcall	.-972    	; 0x17ac <pwm_start>
    1b78:	80 91 b5 20 	lds	r24, 0x20B5
    1b7c:	88 23       	and	r24, r24
    1b7e:	31 f0       	breq	.+12     	; 0x1b8c <main+0x164>
    1b80:	03 df       	rcall	.-506    	; 0x1988 <parseCommand>
    1b82:	80 91 b5 20 	lds	r24, 0x20B5
    1b86:	81 50       	subi	r24, 0x01	; 1
    1b88:	80 93 b5 20 	sts	0x20B5, r24
    1b8c:	80 91 43 20 	lds	r24, 0x2043
    1b90:	88 23       	and	r24, r24
    1b92:	79 f0       	breq	.+30     	; 0x1bb2 <main+0x18a>
    1b94:	f7 01       	movw	r30, r14
    1b96:	60 81       	ld	r22, Z
    1b98:	71 81       	ldd	r23, Z+1	; 0x01
    1b9a:	80 ea       	ldi	r24, 0xA0	; 160
    1b9c:	99 e0       	ldi	r25, 0x09	; 9
    1b9e:	5f da       	rcall	.-2882   	; 0x105e <usart_putchar>
    1ba0:	f8 01       	movw	r30, r16
    1ba2:	60 81       	ld	r22, Z
    1ba4:	71 81       	ldd	r23, Z+1	; 0x01
    1ba6:	80 ea       	ldi	r24, 0xA0	; 160
    1ba8:	99 e0       	ldi	r25, 0x09	; 9
    1baa:	59 da       	rcall	.-2894   	; 0x105e <usart_putchar>
    1bac:	10 92 43 20 	sts	0x2043, r1
    1bb0:	d9 cf       	rjmp	.-78     	; 0x1b64 <main+0x13c>
    1bb2:	80 91 46 20 	lds	r24, 0x2046
    1bb6:	81 30       	cpi	r24, 0x01	; 1
    1bb8:	a9 f6       	brne	.-86     	; 0x1b64 <main+0x13c>
    1bba:	80 91 3c 20 	lds	r24, 0x203C
    1bbe:	88 23       	and	r24, r24
    1bc0:	89 f2       	breq	.-94     	; 0x1b64 <main+0x13c>
    1bc2:	f7 01       	movw	r30, r14
    1bc4:	20 81       	ld	r18, Z
    1bc6:	31 81       	ldd	r19, Z+1	; 0x01
    1bc8:	60 91 47 20 	lds	r22, 0x2047
    1bcc:	86 2f       	mov	r24, r22
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	2d 5f       	subi	r18, 0xFD	; 253
    1bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd4:	28 17       	cp	r18, r24
    1bd6:	39 07       	cpc	r19, r25
    1bd8:	88 f4       	brcc	.+34     	; 0x1bfc <main+0x1d4>
    1bda:	20 81       	ld	r18, Z
    1bdc:	31 81       	ldd	r19, Z+1	; 0x01
    1bde:	82 1b       	sub	r24, r18
    1be0:	93 0b       	sbc	r25, r19
    1be2:	81 36       	cpi	r24, 0x61	; 97
    1be4:	91 05       	cpc	r25, r1
    1be6:	18 f0       	brcs	.+6      	; 0x1bee <main+0x1c6>
    1be8:	f6 01       	movw	r30, r12
    1bea:	a6 82       	std	Z+6, r10	; 0x06
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <main+0x1ca>
    1bee:	f6 01       	movw	r30, r12
    1bf0:	a5 82       	std	Z+5, r10	; 0x05
    1bf2:	b0 92 45 20 	sts	0x2045, r11
    1bf6:	10 92 3c 20 	sts	0x203C, r1
    1bfa:	20 c0       	rjmp	.+64     	; 0x1c3c <main+0x214>
    1bfc:	f7 01       	movw	r30, r14
    1bfe:	40 81       	ld	r20, Z
    1c00:	51 81       	ldd	r21, Z+1	; 0x01
    1c02:	26 2f       	mov	r18, r22
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	2d 5f       	subi	r18, 0xFD	; 253
    1c08:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0a:	24 17       	cp	r18, r20
    1c0c:	35 07       	cpc	r19, r21
    1c0e:	90 f4       	brcc	.+36     	; 0x1c34 <main+0x20c>
    1c10:	20 81       	ld	r18, Z
    1c12:	31 81       	ldd	r19, Z+1	; 0x01
    1c14:	a9 01       	movw	r20, r18
    1c16:	48 1b       	sub	r20, r24
    1c18:	59 0b       	sbc	r21, r25
    1c1a:	41 36       	cpi	r20, 0x61	; 97
    1c1c:	51 05       	cpc	r21, r1
    1c1e:	18 f0       	brcs	.+6      	; 0x1c26 <main+0x1fe>
    1c20:	f6 01       	movw	r30, r12
    1c22:	a5 82       	std	Z+5, r10	; 0x05
    1c24:	02 c0       	rjmp	.+4      	; 0x1c2a <main+0x202>
    1c26:	f6 01       	movw	r30, r12
    1c28:	a6 82       	std	Z+6, r10	; 0x06
    1c2a:	b0 92 45 20 	sts	0x2045, r11
    1c2e:	10 92 3c 20 	sts	0x203C, r1
    1c32:	04 c0       	rjmp	.+8      	; 0x1c3c <main+0x214>
    1c34:	10 92 45 20 	sts	0x2045, r1
    1c38:	10 92 3c 20 	sts	0x203C, r1
    1c3c:	f8 01       	movw	r30, r16
    1c3e:	20 81       	ld	r18, Z
    1c40:	31 81       	ldd	r19, Z+1	; 0x01
    1c42:	60 91 44 20 	lds	r22, 0x2044
    1c46:	86 2f       	mov	r24, r22
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	2d 5f       	subi	r18, 0xFD	; 253
    1c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c4e:	28 17       	cp	r18, r24
    1c50:	39 07       	cpc	r19, r25
    1c52:	88 f4       	brcc	.+34     	; 0x1c76 <main+0x24e>
    1c54:	20 81       	ld	r18, Z
    1c56:	31 81       	ldd	r19, Z+1	; 0x01
    1c58:	82 1b       	sub	r24, r18
    1c5a:	93 0b       	sbc	r25, r19
    1c5c:	81 36       	cpi	r24, 0x61	; 97
    1c5e:	91 05       	cpc	r25, r1
    1c60:	18 f0       	brcs	.+6      	; 0x1c68 <main+0x240>
    1c62:	f6 01       	movw	r30, r12
    1c64:	95 82       	std	Z+5, r9	; 0x05
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <main+0x244>
    1c68:	f6 01       	movw	r30, r12
    1c6a:	96 82       	std	Z+6, r9	; 0x06
    1c6c:	b0 92 b4 20 	sts	0x20B4, r11
    1c70:	10 92 3c 20 	sts	0x203C, r1
    1c74:	77 cf       	rjmp	.-274    	; 0x1b64 <main+0x13c>
    1c76:	f8 01       	movw	r30, r16
    1c78:	40 81       	ld	r20, Z
    1c7a:	51 81       	ldd	r21, Z+1	; 0x01
    1c7c:	26 2f       	mov	r18, r22
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	2d 5f       	subi	r18, 0xFD	; 253
    1c82:	3f 4f       	sbci	r19, 0xFF	; 255
    1c84:	24 17       	cp	r18, r20
    1c86:	35 07       	cpc	r19, r21
    1c88:	90 f4       	brcc	.+36     	; 0x1cae <main+0x286>
    1c8a:	20 81       	ld	r18, Z
    1c8c:	31 81       	ldd	r19, Z+1	; 0x01
    1c8e:	a9 01       	movw	r20, r18
    1c90:	48 1b       	sub	r20, r24
    1c92:	59 0b       	sbc	r21, r25
    1c94:	41 36       	cpi	r20, 0x61	; 97
    1c96:	51 05       	cpc	r21, r1
    1c98:	18 f0       	brcs	.+6      	; 0x1ca0 <main+0x278>
    1c9a:	f6 01       	movw	r30, r12
    1c9c:	96 82       	std	Z+6, r9	; 0x06
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <main+0x27c>
    1ca0:	f6 01       	movw	r30, r12
    1ca2:	95 82       	std	Z+5, r9	; 0x05
    1ca4:	b0 92 b4 20 	sts	0x20B4, r11
    1ca8:	10 92 3c 20 	sts	0x203C, r1
    1cac:	5b cf       	rjmp	.-330    	; 0x1b64 <main+0x13c>
    1cae:	10 92 b4 20 	sts	0x20B4, r1
    1cb2:	10 92 3c 20 	sts	0x203C, r1
    1cb6:	56 cf       	rjmp	.-340    	; 0x1b64 <main+0x13c>

00001cb8 <sendACK>:
    1cb8:	6f e4       	ldi	r22, 0x4F	; 79
    1cba:	80 ea       	ldi	r24, 0xA0	; 160
    1cbc:	99 e0       	ldi	r25, 0x09	; 9
    1cbe:	cf d9       	rcall	.-3170   	; 0x105e <usart_putchar>
    1cc0:	6b e4       	ldi	r22, 0x4B	; 75
    1cc2:	80 ea       	ldi	r24, 0xA0	; 160
    1cc4:	99 e0       	ldi	r25, 0x09	; 9
    1cc6:	cb d9       	rcall	.-3178   	; 0x105e <usart_putchar>
    1cc8:	10 92 4b 20 	sts	0x204B, r1
    1ccc:	08 95       	ret

00001cce <__vector_88>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
												/* ISRs */
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifdef USART_to_BT
ISR(USARTD0_RXC_vect){			//This ISR executes when the UART receives a byte
    1cce:	1f 92       	push	r1
    1cd0:	0f 92       	push	r0
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	0f 92       	push	r0
    1cd6:	11 24       	eor	r1, r1
    1cd8:	0b b6       	in	r0, 0x3b	; 59
    1cda:	0f 92       	push	r0
    1cdc:	2f 93       	push	r18
    1cde:	3f 93       	push	r19
    1ce0:	4f 93       	push	r20
    1ce2:	5f 93       	push	r21
    1ce4:	6f 93       	push	r22
    1ce6:	7f 93       	push	r23
    1ce8:	8f 93       	push	r24
    1cea:	9f 93       	push	r25
    1cec:	af 93       	push	r26
    1cee:	bf 93       	push	r27
    1cf0:	ef 93       	push	r30
    1cf2:	ff 93       	push	r31
	uint8_t message = usart_getchar(&USARTD0);
    1cf4:	80 ea       	ldi	r24, 0xA0	; 160
    1cf6:	99 e0       	ldi	r25, 0x09	; 9
    1cf8:	ba d9       	rcall	.-3212   	; 0x106e <usart_getchar>

	if(message == RESET){
    1cfa:	8f 3f       	cpi	r24, 0xFF	; 255
    1cfc:	19 f4       	brne	.+6      	; 0x1d04 <__vector_88+0x36>
		buf_clear();
    1cfe:	2e de       	rcall	.-932    	; 0x195c <buf_clear>
		sendACK();
    1d00:	db df       	rcall	.-74     	; 0x1cb8 <sendACK>
    1d02:	15 c0       	rjmp	.+42     	; 0x1d2e <__vector_88+0x60>
	}
	else if(message == ECHO){
    1d04:	8e 3f       	cpi	r24, 0xFE	; 254
    1d06:	29 f4       	brne	.+10     	; 0x1d12 <__vector_88+0x44>
		usart_putchar(&USARTD0, message);
    1d08:	6e ef       	ldi	r22, 0xFE	; 254
    1d0a:	80 ea       	ldi	r24, 0xA0	; 160
    1d0c:	99 e0       	ldi	r25, 0x09	; 9
    1d0e:	a7 d9       	rcall	.-3250   	; 0x105e <usart_putchar>
    1d10:	0e c0       	rjmp	.+28     	; 0x1d2e <__vector_88+0x60>
	}
	else{
		buf_put(message);
    1d12:	b3 dd       	rcall	.-1178   	; 0x187a <buf_put>
		bytes_rx++;
    1d14:	80 91 4b 20 	lds	r24, 0x204B
    1d18:	8f 5f       	subi	r24, 0xFF	; 255
    1d1a:	80 93 4b 20 	sts	0x204B, r24
		if(bytes_rx >= 4){
    1d1e:	84 30       	cpi	r24, 0x04	; 4
    1d20:	30 f0       	brcs	.+12     	; 0x1d2e <__vector_88+0x60>
			commands_in_buf++;
    1d22:	80 91 b5 20 	lds	r24, 0x20B5
    1d26:	8f 5f       	subi	r24, 0xFF	; 255
    1d28:	80 93 b5 20 	sts	0x20B5, r24
			sendACK();
    1d2c:	c5 df       	rcall	.-118    	; 0x1cb8 <sendACK>
		}
	}
	
}
    1d2e:	ff 91       	pop	r31
    1d30:	ef 91       	pop	r30
    1d32:	bf 91       	pop	r27
    1d34:	af 91       	pop	r26
    1d36:	9f 91       	pop	r25
    1d38:	8f 91       	pop	r24
    1d3a:	7f 91       	pop	r23
    1d3c:	6f 91       	pop	r22
    1d3e:	5f 91       	pop	r21
    1d40:	4f 91       	pop	r20
    1d42:	3f 91       	pop	r19
    1d44:	2f 91       	pop	r18
    1d46:	0f 90       	pop	r0
    1d48:	0b be       	out	0x3b, r0	; 59
    1d4a:	0f 90       	pop	r0
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	0f 90       	pop	r0
    1d50:	1f 90       	pop	r1
    1d52:	18 95       	reti

00001d54 <__vector_83>:
#endif /* USART_to_BT */

/* Control Interval Timer Interrupt */
ISR(TCD1_OVF_vect){			//I COMMENTED OUT THE ISR IN tc.c
    1d54:	1f 92       	push	r1
    1d56:	0f 92       	push	r0
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	0f 92       	push	r0
    1d5c:	11 24       	eor	r1, r1
    1d5e:	8f 93       	push	r24
    1d60:	9f 93       	push	r25
	static uint16_t i = 0;
	if(i < TIME_INTERVAL){
    1d62:	80 91 3a 20 	lds	r24, 0x203A
    1d66:	90 91 3b 20 	lds	r25, 0x203B
    1d6a:	84 36       	cpi	r24, 0x64	; 100
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	30 f4       	brcc	.+12     	; 0x1d7c <__vector_83+0x28>
		i++;
    1d70:	01 96       	adiw	r24, 0x01	; 1
    1d72:	80 93 3a 20 	sts	0x203A, r24
    1d76:	90 93 3b 20 	sts	0x203B, r25
    1d7a:	07 c0       	rjmp	.+14     	; 0x1d8a <__vector_83+0x36>
	}
	else{
		bang = true;
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	80 93 3c 20 	sts	0x203C, r24
		//gFlags.pidTimer = TRUE; //Flag used for PID control
		i = 0;
    1d82:	10 92 3a 20 	sts	0x203A, r1
    1d86:	10 92 3b 20 	sts	0x203B, r1
	}
}
    1d8a:	9f 91       	pop	r25
    1d8c:	8f 91       	pop	r24
    1d8e:	0f 90       	pop	r0
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	0f 90       	pop	r0
    1d94:	1f 90       	pop	r1
    1d96:	18 95       	reti

00001d98 <__udivmodsi4>:
    1d98:	a1 e2       	ldi	r26, 0x21	; 33
    1d9a:	1a 2e       	mov	r1, r26
    1d9c:	aa 1b       	sub	r26, r26
    1d9e:	bb 1b       	sub	r27, r27
    1da0:	fd 01       	movw	r30, r26
    1da2:	0d c0       	rjmp	.+26     	; 0x1dbe <__udivmodsi4_ep>

00001da4 <__udivmodsi4_loop>:
    1da4:	aa 1f       	adc	r26, r26
    1da6:	bb 1f       	adc	r27, r27
    1da8:	ee 1f       	adc	r30, r30
    1daa:	ff 1f       	adc	r31, r31
    1dac:	a2 17       	cp	r26, r18
    1dae:	b3 07       	cpc	r27, r19
    1db0:	e4 07       	cpc	r30, r20
    1db2:	f5 07       	cpc	r31, r21
    1db4:	20 f0       	brcs	.+8      	; 0x1dbe <__udivmodsi4_ep>
    1db6:	a2 1b       	sub	r26, r18
    1db8:	b3 0b       	sbc	r27, r19
    1dba:	e4 0b       	sbc	r30, r20
    1dbc:	f5 0b       	sbc	r31, r21

00001dbe <__udivmodsi4_ep>:
    1dbe:	66 1f       	adc	r22, r22
    1dc0:	77 1f       	adc	r23, r23
    1dc2:	88 1f       	adc	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	1a 94       	dec	r1
    1dc8:	69 f7       	brne	.-38     	; 0x1da4 <__udivmodsi4_loop>
    1dca:	60 95       	com	r22
    1dcc:	70 95       	com	r23
    1dce:	80 95       	com	r24
    1dd0:	90 95       	com	r25
    1dd2:	9b 01       	movw	r18, r22
    1dd4:	ac 01       	movw	r20, r24
    1dd6:	bd 01       	movw	r22, r26
    1dd8:	cf 01       	movw	r24, r30
    1dda:	08 95       	ret

00001ddc <__tablejump2__>:
    1ddc:	ee 0f       	add	r30, r30
    1dde:	ff 1f       	adc	r31, r31

00001de0 <__tablejump__>:
    1de0:	05 90       	lpm	r0, Z+
    1de2:	f4 91       	lpm	r31, Z
    1de4:	e0 2d       	mov	r30, r0
    1de6:	09 94       	ijmp

00001de8 <__umulhisi3>:
    1de8:	a2 9f       	mul	r26, r18
    1dea:	b0 01       	movw	r22, r0
    1dec:	b3 9f       	mul	r27, r19
    1dee:	c0 01       	movw	r24, r0
    1df0:	a3 9f       	mul	r26, r19
    1df2:	70 0d       	add	r23, r0
    1df4:	81 1d       	adc	r24, r1
    1df6:	11 24       	eor	r1, r1
    1df8:	91 1d       	adc	r25, r1
    1dfa:	b2 9f       	mul	r27, r18
    1dfc:	70 0d       	add	r23, r0
    1dfe:	81 1d       	adc	r24, r1
    1e00:	11 24       	eor	r1, r1
    1e02:	91 1d       	adc	r25, r1
    1e04:	08 95       	ret

00001e06 <__umoddi3>:
    1e06:	68 94       	set
    1e08:	01 c0       	rjmp	.+2      	; 0x1e0c <__udivdi3_umoddi3>

00001e0a <__udivdi3>:
    1e0a:	e8 94       	clt

00001e0c <__udivdi3_umoddi3>:
    1e0c:	8f 92       	push	r8
    1e0e:	9f 92       	push	r9
    1e10:	cf 93       	push	r28
    1e12:	df 93       	push	r29
    1e14:	05 d0       	rcall	.+10     	; 0x1e20 <__udivmod64>
    1e16:	df 91       	pop	r29
    1e18:	cf 91       	pop	r28
    1e1a:	9f 90       	pop	r9
    1e1c:	8f 90       	pop	r8
    1e1e:	08 95       	ret

00001e20 <__udivmod64>:
    1e20:	88 24       	eor	r8, r8
    1e22:	99 24       	eor	r9, r9
    1e24:	f4 01       	movw	r30, r8
    1e26:	e4 01       	movw	r28, r8
    1e28:	b0 e4       	ldi	r27, 0x40	; 64
    1e2a:	9f 93       	push	r25
    1e2c:	aa 27       	eor	r26, r26
    1e2e:	9a 15       	cp	r25, r10
    1e30:	8b 04       	cpc	r8, r11
    1e32:	9c 04       	cpc	r9, r12
    1e34:	ed 05       	cpc	r30, r13
    1e36:	fe 05       	cpc	r31, r14
    1e38:	cf 05       	cpc	r28, r15
    1e3a:	d0 07       	cpc	r29, r16
    1e3c:	a1 07       	cpc	r26, r17
    1e3e:	98 f4       	brcc	.+38     	; 0x1e66 <__udivmod64+0x46>
    1e40:	ad 2f       	mov	r26, r29
    1e42:	dc 2f       	mov	r29, r28
    1e44:	cf 2f       	mov	r28, r31
    1e46:	fe 2f       	mov	r31, r30
    1e48:	e9 2d       	mov	r30, r9
    1e4a:	98 2c       	mov	r9, r8
    1e4c:	89 2e       	mov	r8, r25
    1e4e:	98 2f       	mov	r25, r24
    1e50:	87 2f       	mov	r24, r23
    1e52:	76 2f       	mov	r23, r22
    1e54:	65 2f       	mov	r22, r21
    1e56:	54 2f       	mov	r21, r20
    1e58:	43 2f       	mov	r20, r19
    1e5a:	32 2f       	mov	r19, r18
    1e5c:	22 27       	eor	r18, r18
    1e5e:	b8 50       	subi	r27, 0x08	; 8
    1e60:	31 f7       	brne	.-52     	; 0x1e2e <__udivmod64+0xe>
    1e62:	bf 91       	pop	r27
    1e64:	27 c0       	rjmp	.+78     	; 0x1eb4 <__udivmod64+0x94>
    1e66:	1b 2e       	mov	r1, r27
    1e68:	bf 91       	pop	r27
    1e6a:	bb 27       	eor	r27, r27
    1e6c:	22 0f       	add	r18, r18
    1e6e:	33 1f       	adc	r19, r19
    1e70:	44 1f       	adc	r20, r20
    1e72:	55 1f       	adc	r21, r21
    1e74:	66 1f       	adc	r22, r22
    1e76:	77 1f       	adc	r23, r23
    1e78:	88 1f       	adc	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	88 1c       	adc	r8, r8
    1e7e:	99 1c       	adc	r9, r9
    1e80:	ee 1f       	adc	r30, r30
    1e82:	ff 1f       	adc	r31, r31
    1e84:	cc 1f       	adc	r28, r28
    1e86:	dd 1f       	adc	r29, r29
    1e88:	aa 1f       	adc	r26, r26
    1e8a:	bb 1f       	adc	r27, r27
    1e8c:	8a 14       	cp	r8, r10
    1e8e:	9b 04       	cpc	r9, r11
    1e90:	ec 05       	cpc	r30, r12
    1e92:	fd 05       	cpc	r31, r13
    1e94:	ce 05       	cpc	r28, r14
    1e96:	df 05       	cpc	r29, r15
    1e98:	a0 07       	cpc	r26, r16
    1e9a:	b1 07       	cpc	r27, r17
    1e9c:	48 f0       	brcs	.+18     	; 0x1eb0 <__udivmod64+0x90>
    1e9e:	8a 18       	sub	r8, r10
    1ea0:	9b 08       	sbc	r9, r11
    1ea2:	ec 09       	sbc	r30, r12
    1ea4:	fd 09       	sbc	r31, r13
    1ea6:	ce 09       	sbc	r28, r14
    1ea8:	df 09       	sbc	r29, r15
    1eaa:	a0 0b       	sbc	r26, r16
    1eac:	b1 0b       	sbc	r27, r17
    1eae:	21 60       	ori	r18, 0x01	; 1
    1eb0:	1a 94       	dec	r1
    1eb2:	e1 f6       	brne	.-72     	; 0x1e6c <__udivmod64+0x4c>
    1eb4:	2e f4       	brtc	.+10     	; 0x1ec0 <__udivmod64+0xa0>
    1eb6:	94 01       	movw	r18, r8
    1eb8:	af 01       	movw	r20, r30
    1eba:	be 01       	movw	r22, r28
    1ebc:	cd 01       	movw	r24, r26
    1ebe:	00 0c       	add	r0, r0
    1ec0:	08 95       	ret

00001ec2 <__ashldi3>:
    1ec2:	0f 93       	push	r16
    1ec4:	08 30       	cpi	r16, 0x08	; 8
    1ec6:	90 f0       	brcs	.+36     	; 0x1eec <__ashldi3+0x2a>
    1ec8:	98 2f       	mov	r25, r24
    1eca:	87 2f       	mov	r24, r23
    1ecc:	76 2f       	mov	r23, r22
    1ece:	65 2f       	mov	r22, r21
    1ed0:	54 2f       	mov	r21, r20
    1ed2:	43 2f       	mov	r20, r19
    1ed4:	32 2f       	mov	r19, r18
    1ed6:	22 27       	eor	r18, r18
    1ed8:	08 50       	subi	r16, 0x08	; 8
    1eda:	f4 cf       	rjmp	.-24     	; 0x1ec4 <__ashldi3+0x2>
    1edc:	22 0f       	add	r18, r18
    1ede:	33 1f       	adc	r19, r19
    1ee0:	44 1f       	adc	r20, r20
    1ee2:	55 1f       	adc	r21, r21
    1ee4:	66 1f       	adc	r22, r22
    1ee6:	77 1f       	adc	r23, r23
    1ee8:	88 1f       	adc	r24, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	0a 95       	dec	r16
    1eee:	b2 f7       	brpl	.-20     	; 0x1edc <__ashldi3+0x1a>
    1ef0:	0f 91       	pop	r16
    1ef2:	08 95       	ret

00001ef4 <__subdi3>:
    1ef4:	2a 19       	sub	r18, r10
    1ef6:	3b 09       	sbc	r19, r11
    1ef8:	4c 09       	sbc	r20, r12
    1efa:	5d 09       	sbc	r21, r13
    1efc:	6e 09       	sbc	r22, r14
    1efe:	7f 09       	sbc	r23, r15
    1f00:	80 0b       	sbc	r24, r16
    1f02:	91 0b       	sbc	r25, r17
    1f04:	08 95       	ret

00001f06 <_exit>:
    1f06:	f8 94       	cli

00001f08 <__stop_program>:
    1f08:	ff cf       	rjmp	.-2      	; 0x1f08 <__stop_program>
